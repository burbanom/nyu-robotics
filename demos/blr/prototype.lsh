;; Prototype file for demos/blr.
(libload "util.lsh")
(libload "feature-map")
(libload "turtlebot/turtlebot")
(libload "libc/constants")
(libload "libc/stopwatch")
(libload "idx-float")

#? (prototype-cpp-dummy)
;; Load cpp includes.
(de prototype-cpp-dummy ()
  (cpheader "#include \"ros/roslush.h\"")
  (cheader "#include \"turtlebot/turtlebot.h\"")
  ())

#? (xyz2global-feature-map <xyz> <rgb> <tform-gbl> <tform-base> <fm-gbl <fm-lcl>)
;; Uses the global map to orient the local map in global space. Points
;; are integrated only into the local map. After this process, the local
;; map is essentially a ROI in the global map as they are aligned.
(de xyz2global-feature-map (xyz rgb rgb-suppress rgb-suppress-wnd
                            tform-gbl tform-base fm-gbl fm-lcl)
  ((-idx3- (-float-)) xyz)
  ((-idx1- (-float-)) rgb-suppress)
  ((-int-) rgb-suppress-wnd)
  ((-idx3- (-ubyte-)) rgb)
  ((-idx2- (-float-)) tform-gbl)
  ((-idx2- (-float-)) tform-base)
  ((-obj- (feature-map)) fm-gbl)
  ((-obj- (feature-map)) fm-lcl)
  ;; Place the feature map center pixel on the pixel closest to the
  ;; robot center in the global map. Compute the offset from the pixel
  ;; center to the robot center and compute the feature map using that
  ;; offset when transforming the point cloud.
  (idx-clear :fm-lcl:data)
  (let* ((gbl-cell (int-matrix-nc 2))          ;; Robot position in global map.
         (gbl-cell-world (float-matrix-nc 3))  ;; Global cell in world coordinates.
         (tform-lcl (float-matrix-nc 4 4))     ;; Robot local transform.
         (tform-full (float-matrix-nc 4 4))    ;; Robot local transform and base transform.
         (map-cell (int-matrix-nc 2))          ;; Target cell for xyz point.
         (xyz-tform (float-matrix-nc 3)))      ;; Transformed xyz point.
;;         (img-dbg (ubyte-matrix-nc 1 1 3)))
    ;; Compute map cell for robot position in global map.
    (==> fm-gbl world2map-cell (narrow (select tform-gbl 1 3) 0 3 0) gbl-cell)
    ;; Get pixel center for global-cell in world coordinates.
    (==> fm-gbl map-cell2world gbl-cell (narrow gbl-cell-world 0 2 0))
    (gbl-cell-world 2 0)
    ;; Compute local transform for the robot subtracting the global map offset.
    (idx-copy tform-gbl tform-lcl)
    (let ((tform-lcl-trans (narrow (select tform-lcl 1 3) 0 3 0)))
      (idx-sub tform-lcl-trans gbl-cell-world tform-lcl-trans))
    ;; Apply camera to base link transform and compute map.
    (idx-m2timesm2 tform-lcl tform-base tform-full)
    (xyzrgb2feature-map xyz rgb rgb-suppress rgb-suppress-wnd tform-full fm-lcl))) ;;img-dbg)
;;    (rgb-draw-matrix 520 0 img-dbg 1 1)))

;; Time to live for a feature observation.
(defconstant "COST_MAP_GLOBAL_TTL_SECONDS" 120)

#? (de fm-global-decay <fm-gbl> <cm-gbl> <cm-gbl-rgb> <ttl-seconds> <time-now>)
;; Decay a global feature map and cost map with rgb optimiations.
(de fm-global-decay (fm-gbl cm-gbl cm-gbl-rgb ttl-seconds time-now)
  ((-obj- (feature-map)) fm-gbl)
  ((-obj- (cost-map)) cm-gbl)
  ((-idx3- (-ubyte-)) cm-gbl-rgb)
  ((-float-) ttl-seconds)
  ((-float-) time-now)
  (let ((time-cutoff (- time-now ttl-seconds))
        (blue [i 0 0 255]))
    (idx-pbloop ((fm-r :fm-gbl:data)(cm-r :cm-gbl:data)(cm-rgb-r cm-gbl-rgb))
      (idx-bloop ((fm fm-r)(cm cm-r)(cm-rgb cm-rgb-r))
        ;; Reset point when last-seen time is too old.
        (if (< (fm @FEATURE_MAP_IDX_COUNT) time-cutoff)
          (progn
            (idx-clear fm)
            ;; reissb -- 20120201 -- Can't get inifinity to compile.
            ;;(fm @FEATURE_MAP_IDX_COUNT 9999999999.1)
            (fm @FEATURE_MAP_IDX_COUNT (float-inf))
            (cm 0 @COST_MAP_INF_COST)
            (idx-copy blue cm-rgb)))))))

;; Exponential moving average weight used to blend new observations into the
;; global feature map.
(defconstant "COST_MAP_GLOBAL_EXP_MOV_AVG_WT" 0.9)

(defconstant "FM_LCL_REGISTRATION_MIN_MATCHES" 6)
;; Resample a local feature map by solving a least squares optimization.
(de fm-local-registration (fm-lcl fm-gbl fm-gbl-cell
                           fm-gbl-feat fm-lcl-feat
                           px-correspond-gbl px-correspond-lcl
                           rot offset window-dim 
                           img-dispar)
  ((-obj- (feature-map)) fm-lcl)
  ((-obj- (feature-map)) fm-gbl)
  ((-idx3- (-float-)) fm-gbl-feat)
  ((-idx3- (-float-)) fm-lcl-feat)
  ((-idx2- (-double-)) px-correspond-gbl)
  ((-idx2- (-double-)) px-correspond-lcl)
  ((-idx1- (-int-)) fm-gbl-cell)
  ((-idx2- (-float-)) rot)
  ((-idx1- (-float-)) offset)
  ((-int-) window-dim)
  ((-idx3- (-ubyte-)) img-dispar)
  ;; Find correspondences by looking in a square neighborhood about the image of
  ;; significant features in the global map projected into the local map.
  ;; Define sigificant features by their feature vector
  ;;   height hist, rgb medians
  (let* (;; General variables.
         (neigh-size (+ (* 2 window-dim) 1))
         (num-pts 0)
         ;; Full size data.
         (r (:fm-lcl:full-dim 0))
         (c (:fm-lcl:full-dim 1)) 
         (gbl-crop-ul (idx-sub fm-gbl-cell :fm-lcl:half-dim))
         (fm-gbl-crop (narrow (narrow :fm-gbl:data 0 r (gbl-crop-ul 0)) 1 c (gbl-crop-ul 1)))
         (num-feat-ht 0)
         (num-feat-hist @FEATURE_MAP_HT_BIN_COUNT)
         (num-feat-rgb (* @FEATURE_MAP_HT_BIN_COUNT 3))
         (num-feat (+ num-feat-ht num-feat-hist num-feat-rgb))
         (fm-gbl-mask (ubyte-matrix-nc r c))
         (fm-lcl-mask (ubyte-matrix-nc r c))
;;         (img-rgb-median (ubyte-matrix r c @FEATURE_MAP_HT_BIN_COUNT 3))
         )

    (idx-f3resize fm-gbl-feat r c num-feat)
    (idx-f3resize fm-lcl-feat r c num-feat)
    ;; ******************** FEATURE EXTRACTION ********************
    ;; ******************** FEATURE EXTRACTION ********************
    ;; ******************** FEATURE EXTRACTION ********************
    (idx-pbloop ((fm-gbl-r fm-gbl-crop)
                 (fm-lcl-r :fm-lcl:data)
                 (fm-gbl-mask-r fm-gbl-mask)
                 (fm-lcl-mask-r fm-lcl-mask)
                 (fm-gbl-feat-r fm-gbl-feat)
                 (fm-lcl-feat-r fm-lcl-feat)
;;                 (img-rgb-median img-rgb-median)
                 )
      (idx-pbloop ((fm-gbl fm-gbl-r)
                   (fm-lcl fm-lcl-r)
                   (fm-gbl-mask fm-gbl-mask-r)
                   (fm-lcl-mask fm-lcl-mask-r)
                   (fm-gbl-feat fm-gbl-feat-r)
                   (fm-lcl-feat fm-lcl-feat-r)
;;                   (img-rgb-median img-rgb-median)
                   )
        ;; Mask only when there are no points.
        (fm-gbl-mask (if (> (fm-gbl @FEATURE_MAP_NUM_PTS) 0) 1 0))
        (fm-lcl-mask (if (> (fm-lcl @FEATURE_MAP_NUM_PTS) 0) 1 0))
        ;; Compute mean, variance, histogram.
        (let ((gbl-num (fm-gbl @FEATURE_MAP_NUM_PTS))
              (lcl-num (fm-lcl @FEATURE_MAP_NUM_PTS))
;;              (gbl-sum-x (fm-gbl @FEATURE_MAP_SUM_HT))
;;              (lcl-sum-x (fm-lcl @FEATURE_MAP_SUM_HT))
;;              (gbl-sum-xx (fm-gbl @FEATURE_MAP_SUM_HT_SQ))
;;              (lcl-sum-xx (fm-lcl @FEATURE_MAP_SUM_HT_SQ))
              (depth-feat-wt (/ num-feat-rgb num-feat-hist))
              (hist-gbl-denorm (narrow fm-gbl 0 num-feat-hist @FEATURE_MAP_NUM_HT_BIN_BEGIN))
              (hist-lcl-denorm (narrow fm-lcl 0 num-feat-hist @FEATURE_MAP_NUM_HT_BIN_BEGIN))
              (hist-gbl-norm (narrow fm-gbl-feat 0 num-feat-hist num-feat-ht))
              (hist-lcl-norm (narrow fm-lcl-feat 0 num-feat-hist num-feat-ht))
              (hist-gbl-rgb-src (narrow fm-gbl 0 num-feat-rgb @FEATURE_MAP_RGB_MEDIAN_BEGIN))
              (hist-lcl-rgb-src (narrow fm-lcl 0 num-feat-rgb @FEATURE_MAP_RGB_MEDIAN_BEGIN))
              (hist-gbl-rgb-dst (narrow fm-gbl-feat 0 num-feat-rgb (+ num-feat-ht num-feat-hist)))
              (hist-lcl-rgb-dst (narrow fm-lcl-feat 0 num-feat-rgb (+ num-feat-ht num-feat-hist))))

;;          ;; Copy RGB median bin for debugging.
;;          (for (i 0 (- @FEATURE_MAP_RGB_MEDIAN_END @FEATURE_MAP_RGB_MEDIAN_BEGIN 1)) ((-int-) i)
;;            (img-rgb-median (/ i 3) (mod i 3) (* (hist-lcl-rgb-src i) 255)))

          (if (= 0 gbl-num)
            (idx-clear fm-gbl-feat)
            (idx-f1dotc hist-gbl-denorm (/ depth-feat-wt gbl-num) hist-gbl-norm)
            (idx-copy hist-gbl-rgb-src hist-gbl-rgb-dst))
          (if (= 0 lcl-num)
            (idx-clear fm-lcl-feat)
              (idx-f1dotc hist-lcl-denorm (/ depth-feat-wt lcl-num) hist-lcl-norm)
              (idx-copy hist-lcl-rgb-src hist-lcl-rgb-dst)))))
;;    (gray-draw-matrix (:fm-gbl:full-dim 1) (* 2 r) fm-lcl-mask 0 1 1 1)
;;    (for (i 0 1)
;;      (gray-draw-matrix (+ (:fm-gbl:full-dim 1) c) (* i r) (select fm-gbl-feat 2 (+ 2 i)) 0 1 1 1))
;;    (gray-draw-matrix (+ (:fm-gbl:full-dim 1) c) (* 2 r)
;;      (select fm-gbl-feat 2 (+ num-feat-ht num-feat-hist -1)) 0 1 1 1)
;;    (for (i 0 2) (rgb-draw-matrix (* c i) (* 3 r) (select img-rgb-median 2 (* 2 i)) 1 1))
;;    (rgb-draw-matrix (* c 3) (* 3 r) (select img-rgb-median 2 (- (/ num-feat-rgb 3) 1)) 1 1)
    ;; ******************** FEATURE EXTRACTION ********************
    ;; ******************** FEATURE EXTRACTION ********************
    ;; ******************** FEATURE EXTRACTION ********************

    ;; ******************** INTEREST POINT DETECTION & MATCHING ********************
    ;; ******************** INTEREST POINT DETECTION & MATCHING ********************
    ;; ******************** INTEREST POINT DETECTION & MATCHING ********************
    (let* ((fm-gbl-feat-neigh (unfold (unfold fm-gbl-feat 0 neigh-size 1) 1 neigh-size 1))
           (fm-lcl-feat-neigh (unfold (unfold fm-lcl-feat 0 neigh-size 1) 1 neigh-size 1))
           (fm-gbl-mask-neigh (unfold (unfold fm-gbl-mask 0 neigh-size 1) 1 neigh-size 1))
           (fm-lcl-mask-neigh (unfold (unfold fm-lcl-mask 0 neigh-size 1) 1 neigh-size 1))
           (r-match (idx-dim fm-gbl-feat-neigh 0))
           (c-match (idx-dim fm-gbl-feat-neigh 1))
;;           (fm-gbl-mask-match (narrow (narrow fm-gbl-mask 0 r-match window-dim) 1 c-match window-dim))
           (fm-lcl-mask-match (narrow (narrow fm-lcl-mask 0 r-match window-dim) 1 c-match window-dim))
;;           (fm-gbl-pt (narrow (narrow  fm-gbl-crop 0 r-match window-dim) 1 c-match window-dim))
;;           (fm-lcl-pt (narrow (narrow :fm-lcl:data 0 r-match window-dim) 1 c-match window-dim))
;;           (fm-gbl-feat-pt (narrow (narrow fm-gbl-feat 0 r-match window-dim) 1 c-match window-dim))
           (fm-lcl-feat-pt (narrow (narrow fm-lcl-feat 0 r-match window-dim) 1 c-match window-dim))

           ;; Ratio of distance to closest point in global window to norm of
           ;; the global point. Smaller is more permissive.
           (interest-pt-thresh (* 0.50 0.50))
           ;; Ratio of closest distance to next-closest distance in local
           ;; window. Larger is more permissive.
           (match-pt-thresh (* 0.80 0.80))

           (i window-dim) ;; Local map coordinate.
           (j window-dim) ;; Local map coordinate.
           (masked-pts 0)
           (num-matched 0)

           ;; Inerest point detection.
           (match-offset (int-matrix 2))
           (min-dist-sq-0 [d@ 0])
           (min-dist-sq-1 [d@ 0])
           (fm-lcl-feat-pt-norm-sq [d@ 0])
           (diff-tmp (double-matrix-nc (idx-dim fm-gbl-feat 2)))
           (dist-sq [d@ 0])
           (cell-src (int-matrix-nc 2))
           (cell-dst (int-matrix-nc 2))
           (world-cell-tmp (float-matrix-nc 2)))

      ((-float-) interest-pt-thresh)
      ((-float-) match-pt-thresh)
      ((-int-) masked-pts)
      ((-int-) i)
      ((-int-) j)
      ((-int-) num-matched)
      ;; Loop over all points. If the global point is interesting, then look
      ;; for it in the local neighborhood.
      (idx-bloop ((fm-gbl-feat-neigh fm-gbl-feat-neigh)
                  (fm-lcl-feat-neigh fm-lcl-feat-neigh)
                  (fm-gbl-mask-neigh fm-gbl-mask-neigh)
                  (fm-lcl-mask-neigh fm-lcl-mask-neigh)
;;                  (fm-gbl-feat-pt fm-gbl-feat-pt)
                  (fm-lcl-feat-pt fm-lcl-feat-pt)
;;                  (fm-gbl-pt fm-gbl-pt)
;;                  (fm-gbl-mask-match fm-gbl-mask-match)
                  (fm-lcl-mask-match fm-lcl-mask-match))
        (setq j window-dim)
        (idx-bloop ((fm-gbl-feat-neigh fm-gbl-feat-neigh)
                    (fm-lcl-feat-neigh fm-lcl-feat-neigh)
                    (fm-gbl-mask-neigh fm-gbl-mask-neigh)
                    (fm-lcl-mask-neigh fm-lcl-mask-neigh)
;;                    (fm-gbl-feat-pt fm-gbl-feat-pt)
                    (fm-lcl-feat-pt fm-lcl-feat-pt)
;;                    (fm-gbl-pt fm-gbl-pt)
;;                    (fm-gbl-mask-match fm-gbl-mask-match)
                    (fm-lcl-mask-match fm-lcl-mask-match))
          ;; See if this point is interesting and could match by taking the
          ;; difference between this point and all points in the local neighborhood.
          ;; The closest norm squared difference will give an indication that the
          ;; point is unique.
          (when (<> (fm-lcl-mask-match) 0)
            (idx-m1dotm1 fm-lcl-feat-pt fm-lcl-feat-pt fm-lcl-feat-pt-norm-sq)
            (min-dist-sq-0 (double-inf))
            (setq masked-pts 0)
            (for (i (- window-dim) window-dim)
              (for (j (- window-dim) window-dim)
                ((-int-) i)
                ((-int-) j)
                (let* ((i-pt (+ i window-dim))
                       (j-pt (+ j window-dim))
                       (fm-lcl-neigh-pt (select (select fm-lcl-feat-neigh 1 i-pt) 1 j-pt))
                       (fm-lcl-mask-pt (select (select fm-lcl-mask-neigh 0 i-pt) 0 j-pt)))
                  (when (and (or (<> 0 i) (<> 0 j)) (<> 0 (fm-lcl-mask-pt)))
                    (incr masked-pts)
                    ;; Check distance to point.
                    (idx-sub fm-lcl-feat-pt fm-lcl-neigh-pt diff-tmp)
                    (idx-m1dotm1 diff-tmp diff-tmp dist-sq)
                    (min-dist-sq-0 (min (dist-sq) (min-dist-sq-0)))))))
            ;; See if this point is interesting by normalizing closest point by norm square.
;;            (printf "closest = %f, norm = %f\n" (min-dist-sq-0) (fm-lcl-feat-pt-norm-sq))
;;            (printf "closest / norm = %f\n" (/ (min-dist-sq-0) (fm-lcl-feat-pt-norm-sq)))
            (when (and (> masked-pts window-dim)
                       (> (/ (min-dist-sq-0) (fm-lcl-feat-pt-norm-sq)) interest-pt-thresh))
;;              (printf "interest-pt (%d, %d), fm-lcl-feat-pt =\n" i j)
              ;; Find this point in the local map.  Subtract global point from the
              ;; local neighborhood and take norm square.
              (min-dist-sq-0 (double-inf))
              (min-dist-sq-1 (double-inf))
              (setq masked-pts 0)
              (for (i (- window-dim) window-dim)
                (for (j (- window-dim) window-dim)
                  ((-int-) i)
                  ((-int-) j)
                  (let* ((i-pt (+ i window-dim))
                         (j-pt (+ j window-dim))
                         (fm-gbl-neigh-pt (select (select fm-gbl-feat-neigh 1 i-pt) 1 j-pt))
                         (fm-gbl-mask-pt (select (select fm-gbl-mask-neigh 0 i-pt) 0 j-pt)))
                    ;; Make sure masked.
                    (when (<> 0 (fm-gbl-mask-pt))
                      (incr masked-pts)
                      ;; See if closest match.
                      (idx-sub fm-lcl-feat-pt fm-gbl-neigh-pt diff-tmp)
                      (idx-m1dotm1 diff-tmp diff-tmp dist-sq)
                      (if (> (dist-sq) (min-dist-sq-0))
                        (min-dist-sq-1 (min (dist-sq) (min-dist-sq-1)))
                        (min-dist-sq-0 (dist-sq)) (match-offset 0 i) (match-offset 1 j))))))
              ;; Compute interest point and match coordinates.
              (cell-dst 0 i) (cell-dst 1 j)
              (idx-add cell-dst match-offset cell-src)
              ;; We have a match when the second closest far enough from the first and when
              ;; the closest is close enough.
;;              (printf "closest / 2nd-closest = %f\n" (/ (min-dist-sq-0) (min-dist-sq-1)))
              (when (> masked-pts window-dim)
                (if (>= (/ (min-dist-sq-0) (min-dist-sq-1)) match-pt-thresh)
;;                        (< (/ (min-dist-sq-1) (fm-gbl-feat-pt-norm-sq)) interest-pt-thresh))
                  (progn (img-dispar (cell-src 0) (cell-src 1) 1 96)
                         (img-dispar (cell-dst 0) (cell-dst 1) 0 96)
;;                    (printf "no match : closest = %f, 2nd = %f\n" (min-dist-sq-0) (min-dist-sq-1))
                    )
;;                  (printf "cell-src = (%d, %d), cell-dst = (%d, %d)\n"
;;                          (cell-src 0) (cell-src 1) (cell-dst 0) (cell-dst 1))
                  (img-dispar (cell-src 0) (cell-src 1) 1 255)
                  (img-dispar (cell-dst 0) (cell-dst 1) 0 255)
;;                  (pretty fm-gbl-feat-pt)
;;                  (pretty (select (select fm-lcl-feat 0 (cell-dst 0)) 0 (cell-dst 1)))
;;                  (printf "closest (%d,%d) = %f\n" (match-offset 0) (match-offset 1) (min-dist-sq-0))
                  (==> fm-lcl map-cell2world cell-src world-cell-tmp)
                  (idx-d2resize px-correspond-gbl (+ num-matched 1) 2)
                  (idx-copy world-cell-tmp (select px-correspond-gbl 0 num-matched))
                  (==> fm-lcl map-cell2world cell-dst world-cell-tmp)
                  (idx-d2resize px-correspond-lcl (+ num-matched 1) 2)
                  (idx-copy world-cell-tmp (select px-correspond-lcl 0 num-matched))
                  (incr num-matched)))))
          (incr j))
        (incr i))
      ;; Perform registration between maps when there are enough point correspondences.
      (printf "There were %d point correspondences\n" num-matched) 
      (if (>= num-matched @FM_LCL_REGISTRATION_MIN_MATCHES)
        (let ((rot-d (double-matrix-nc 2 2))
              (offset-d (double-matrix-nc 2)))
          (map-registration px-correspond-gbl px-correspond-lcl rot-d offset-d)
          (idx-copy rot-d rot)
          (idx-copy offset-d (narrow offset 0 2 0)) (offset 0 0)))
      num-matched))
  ;; ******************** INTEREST POINT DETECTION & MATCHING ********************
  ;; ******************** INTEREST POINT DETECTION & MATCHING ********************
  ;; ******************** INTEREST POINT DETECTION & MATCHING ********************
  )

;; Take a local feature map and integrate it into a global feature map.
(de fm-global-update (fm-gbl cm-gbl cm-gbl-rgb fm-gbl-cell fm-lcl time-now)
  ((-obj- (feature-map)) fm-gbl)
  ((-obj- (cost-map)) cm-gbl)
  ((-idx3- (-ubyte-)) cm-gbl-rgb)
  ((-idx1- (-int-)) fm-gbl-cell)
  ((-obj- (feature-map)) fm-lcl)
  ((-float-) time-now)
  ;; Decay the global feature map.
  (fm-global-decay fm-gbl cm-gbl cm-gbl-rgb @COST_MAP_GLOBAL_TTL_SECONDS time-now)
  ;; Integrate fm-local into fm-global.
  (let ((ul (idx-sub fm-gbl-cell :fm-lcl:half-dim))
        (lr (idx-add fm-gbl-cell :fm-lcl:half-dim))
        (roi (int-matrix-nc 4))
        (mask-rows 0)
        (mask-cols 0))
    (roi 0 (max (ul 0) 0))
    (roi 1 (max (ul 1) 0))
    (roi 2 (min (lr 0) (:fm-gbl:full-dim 0)))
    (roi 3 (min (lr 1) (:fm-gbl:full-dim 1)))
    (setq mask-rows (+ (- (roi 2) (roi 0)) 1))
    (setq mask-cols (+ (- (roi 3) (roi 1)) 1))
    ;; Make sure that mask is in bounds.
    (when (and (> mask-rows 0) (> mask-cols 0))
      ;; Mask fm-global, cm-global and integrate fm-local.
      (let ((fm-gbl-mask
              (narrow (narrow :fm-gbl:data 0 mask-rows (ul 0)) 1 mask-cols (ul 1)))
            (cm-gbl-mask
              (narrow (narrow :cm-gbl:data 0 mask-rows (ul 0)) 1 mask-cols (ul 1)))
            (prev-data-wt (- 1.0 @COST_MAP_GLOBAL_EXP_MOV_AVG_WT))
            (update-data-weighted (float-matrix-nc @FEATURE_MAP_IDX_COUNT)))
        ;; TODO(reissb) -- Clip fm-local.
        (idx-pbloop ((fm-gbl-r fm-gbl-mask)(fm-lcl-r :fm-lcl:data))
          (idx-bloop ((fm-g fm-gbl-r)(fm-l fm-lcl-r))
            ;; Weighted average of the features.
            (when (<> (fm-l 0) 0)
              (let ((fm-g-trunc (narrow fm-g 0 @FEATURE_MAP_IDX_COUNT 0))
                    (fm-l-trunc (narrow fm-l 0 @FEATURE_MAP_IDX_COUNT 0)))
                ;; See if this is the first update.
                (if (= (fm-g-trunc 0) 0)
                  ;; No average for first update.
                  (idx-copy fm-l-trunc fm-g-trunc)
                  ;; Else exponential moving average.
                  (idx-f1dotc fm-l-trunc @COST_MAP_GLOBAL_EXP_MOV_AVG_WT update-data-weighted)
                  (idx-f1dotc fm-g-trunc prev-data-wt fm-g-trunc)
                  (idx-add fm-g-trunc update-data-weighted fm-g-trunc))
                ;; Update last-seen time.
                (fm-g @FEATURE_MAP_IDX_COUNT time-now)))))
        ;; Compute global cost map.
        (feature-map2cost-map fm-gbl-mask cm-gbl-mask)))))

(defclass feature-map-pyramid object
  scale half-dim levels data)

(defmethod feature-map-pyramid feature-map-pyramid (half-dim-in scale-in level-scale levels-in)
  (setq half-dim (idx-copy half-dim-in))
  (setq scale (idx-copy scale-in))
  (setq levels levels-in)
  (setq data (htable levels))
  (for (i 0 (- levels 1))
    (let ((scale-fac (** level-scale i))
          (half-dim-div (idx-copy half-dim))
          (scale-div (idx-copy scale)))
      (half-dim-div 0 (* (half-dim-div 0) (/ 1.0 scale-fac)))
      (half-dim-div 1 (* (half-dim-div 1) (/ 1.0 scale-fac)))
      (idx-f1dotc scale-div scale-fac scale-div)
      (let* ((fm  (new feature-map half-dim-div scale-div (+ @FEATURE_MAP_IDX_COUNT 1)))
             (cm  (new cost-map fm))
             (rgb (ubyte-matrix (:cm:full-dim 0) (:cm:full-dim 1) 3)))
        (data i `(,fm ,cm ,rgb)))))
  this)

(de xyz2global-feature-map-test (tb n)
  (==> tb start-sub-camera-depth-points)
  (==> tb start-sub-camera-rgb-image-color)
;;  (==> tb start-sub-robot-pose-ekf)
;;  (==> tb start-sub-odom)
  ;; Create feature, cost, and cost rgb maps.
  (let* ((pyr-levels 2)
         (scale [f 0.08 0.08])
         (gbl-half-dim [i 200 200])
         (lcl-half-dim [i 80 80])
         (fm-gbl-pyr (new feature-map-pyramid gbl-half-dim scale 2 pyr-levels))
         (fm-lcl-pyr (new feature-map-pyramid lcl-half-dim scale 2 pyr-levels))
         (fm-gbl-cell (int-matrix-nc 2))
         (tmr (new stopwatch))
         (rgb-ds-samples (ubyte-matrix-nc 1 3))
         (rgb-suppress (float-matrix 3))
         (rgb-suppress-wnd 10)
         (tform-odom (float-matrix 4 4))
         (tform-odom-correct (float-matrix 4 4))
         (tform-odom-corrected (float-matrix 4 4))
         (tform-full (float-matrix 4 4))
         (tform-odom-correct-upd (float-matrix 4 4))
         (tform-odom-correct-upd-rot (narrow (narrow tform-odom-correct-upd 0 2 0) 1 2 0))
         (tform-odom-correct-upd-trans (select (narrow tform-odom-correct-upd 0 3 0) 1 3))
         (num-matched 0)
         (odom-orien (float-matrix 4))
         (odom-pos (float-matrix 3))
         (fm-gbl-feat (float-matrix-nc 1 1 1))
         (fm-lcl-feat (float-matrix-nc 1 1 1))
         (px-correspond-gbl (double-matrix-nc 1 2))
         (px-correspond-lcl (double-matrix-nc 1 2))
         (draw-r 0))

    ((-int-) num-matched)

    (for (i 0 3) (tform-odom-correct i i 1))
    ;; Setup cost maps.
    (for (i 0 (- pyr-levels 1))
      (idx-f2fill (select :(car (:fm-gbl-pyr:data i)):data 2 @FEATURE_MAP_IDX_COUNT) (- (float-inf)))
      (idx-copy :(car (:fm-gbl-pyr:data i)):half-dim :(car (:fm-gbl-pyr:data i)):center)
      (let ((fm-lcl (car (:fm-lcl-pyr:data i))))
        (idx-copy :fm-lcl:half-dim :fm-lcl:center)
        (nconc1 (:fm-lcl-pyr:data i) (ubyte-matrix (:fm-lcl:full-dim 0) (:fm-lcl:full-dim 1) 3))))
    ;; Create properly sized window if it doesn't exist.
    (if (not window) (
      let ((wnd-width 0)(wnd-height 0))
        (setq wnd-width (+ 2 (* 2 (gbl-half-dim 1)) (* 2 (lcl-half-dim 1))))
        (setq wnd-height 0)
        (for (i 1 pyr-levels) (setq wnd-height (+ wnd-height 1 (/ (* 2 (gbl-half-dim 1)) i))))
        (new-window 0 0 wnd-width wnd-height)))
    (cls)
    ;; Do n loops of processing.
    (for (i 0 (- n 1))
      ;; Grab new data.
      (while (< (==> tb update-camera-depth-points) 0) ())
      (while (< (==> tb update-camera-rgb-image-color) 0) ())
;;      (while (< (==> tb update-robot-pose-ekf) 0) ())
;;      (while (< (==> tb update-odom) 0) ())
      ;; Update transform using odometry.
;;      (idx-copy :tb:odom-pose-position odom-pos)
;;      (idx-copy :tb:odom-pose-orientation odom-orien)
      (idx-copy :tb:robot-pose-ekf-position odom-pos)
      (idx-copy :tb:robot-pose-ekf-orientation odom-orien)
      ;; Flip the angle (invert).
      (odom-orien 3 (- (odom-orien 3)))
      (quaternion2matrix odom-orien tform-odom)
      (printf "odom-orien cos(theta) : %f\n" (tform-odom 0 0))
      (printf "odom-orien sin(theta) : %f\n" (tform-odom 1 0))
      ;; Apply orientation to the position.
      (idx-m2dotm1 (narrow (narrow tform-odom 0 3 0) 1 3 0) odom-pos
                   (select (narrow tform-odom 0 3 0) 1 3))
      (tform-odom 3 3 1)
;;        (printf "tform-odom\n") (pretty tform-odom)
    ;; Correct the odometry using the last correction factor.
    (idx-m2timesm2 tform-odom-correct tform-odom tform-odom-corrected)
    ;; Compute scene mode to ignore a color.
    (mode-rgb-matrix :tb:camera-rgb-image-color 3 10 rgb-ds-samples rgb-suppress)
    (printf "rgb-suppress = (%f, %f, %f)\n" (rgb-suppress 0) (rgb-suppress 1) (rgb-suppress 2))
    ;; Register feature maps using visual odometry and pyramid.
    (for (lvl-inv 0 (- pyr-levels 1))
      (let* ((lvl (- pyr-levels lvl-inv 1))
             (fm-gbl-all (:fm-gbl-pyr:data lvl))
             (fm-gbl     (car   fm-gbl-all))
             (cm-gbl     (cadr  fm-gbl-all))
             (cm-gbl-rgb (caddr fm-gbl-all))
             (fm-lcl-all (:fm-lcl-pyr:data lvl))
             (fm-lcl     (car   fm-lcl-all))
             (cm-lcl     (cadr  fm-lcl-all))
             (cm-lcl-rgb (caddr fm-lcl-all))
             (img-dispar (car (cdddr fm-lcl-all))))
        ;; Compute local map using current odometry guess.
        (xyz2global-feature-map :tb:camera-depth-points :tb:camera-rgb-image-color
                                rgb-suppress rgb-suppress-wnd
                                tform-odom-corrected turtlebot-c2v fm-gbl fm-lcl)
        (idx-clear tform-odom-correct-upd)
        (for (i 0 3) (tform-odom-correct-upd i i 1))
        (idx-clear img-dispar)
        ;; Get robot world position in map coordinates.
        (==> fm-gbl world2map-cell (select tform-odom-corrected 1 3) fm-gbl-cell)
        (setq num-matched (fm-local-registration fm-lcl fm-gbl fm-gbl-cell
                                                 fm-gbl-feat fm-lcl-feat
                                                 px-correspond-gbl px-correspond-lcl
                                                 tform-odom-correct-upd-rot
                                                 tform-odom-correct-upd-trans 2 img-dispar))
        (when (> num-matched 0)
          ;; Update odometry correction transformation by adding the current one.
          (progn
            (idx-copy tform-odom-correct tform-odom-corrected)
            (idx-m2timesm2 tform-odom-correct-upd tform-odom-corrected tform-odom-correct))
  ;;        (printf "upd-trans\n")(pretty tform-odom-correct-upd-trans)
  ;;        (printf "upd-rot cos(theta) : %0.5f\n" (tform-odom-correct-upd-rot 0 0))
  ;;        (printf "upd-rot sin(theta) : %0.5f\n" (tform-odom-correct-upd-rot 1 0))
          ;; Correct the odometry using the new correction factor.
          (idx-m2timesm2 tform-odom-correct tform-odom tform-odom-corrected)
          ;; Get robot world position in map coordinates.
          (==> fm-gbl world2map-cell (select tform-odom-corrected 1 3) fm-gbl-cell))))

    (printf "tx         : %1.3f\n" (tform-odom-correct 0 3))
    (printf "ty         : %1.3f\n" (tform-odom-correct 1 3))
    (printf "cos(theta) : %0.5f\n" (tform-odom-correct 0 0))
    (printf "sin(theta) : %0.5f\n" (tform-odom-correct 1 0))

    ;; Compute final maps.
    (setq draw-r 0)
    (for (lvl-inv 0 (- pyr-levels 1))
      (let* ((lvl (- pyr-levels lvl-inv 1))
             (fm-gbl-all (:fm-gbl-pyr:data lvl))
             (fm-gbl     (car   fm-gbl-all))
             (cm-gbl     (cadr  fm-gbl-all))
             (cm-gbl-rgb (caddr fm-gbl-all))
             (fm-lcl-all (:fm-lcl-pyr:data lvl))
             (fm-lcl     (car   fm-lcl-all))
             (cm-lcl     (cadr  fm-lcl-all))
             (cm-lcl-rgb (caddr fm-lcl-all))
             (img-dispar (car (cdddr fm-lcl-all))))
        ;; Compute local map using current odometry guess.
        (xyz2global-feature-map :tb:camera-depth-points :tb:camera-rgb-image-color
                                rgb-suppress rgb-suppress-wnd
                                tform-odom-corrected turtlebot-c2v fm-gbl fm-lcl)
        (progn (feature-map2cost-map :fm-lcl:data :cm-lcl:data)
               (setq :cm-lcl:pcl-density :fm-lcl:pcl-density))
        ;; Get robot world position in map coordinates.
        (==> fm-gbl world2map-cell (select tform-odom-corrected 1 3) fm-gbl-cell)
        ;; Update global map (with cost map rgb optimizations).
        (fm-global-update fm-gbl cm-gbl cm-gbl-rgb fm-gbl-cell fm-lcl (==> tmr get))
        ;; Prepare for display.
        (cost-map2rgb 1 cm-gbl cm-gbl-rgb)
        (cost-map2rgb 1 cm-lcl cm-lcl-rgb)
        ;; Draw maps.
        (rgb-draw-matrix 0 draw-r cm-gbl-rgb 1 1)
        (rgb-draw-matrix (idx-dim cm-gbl-rgb 1) draw-r cm-lcl-rgb 1 1)
        (rgb-draw-matrix (:fm-gbl:full-dim 1) (+ draw-r (idx-dim img-dispar 0)) img-dispar 1 1)
        ;; Update draw row.
        (incr draw-r (:fm-gbl:full-dim 0))))))
  ())

;;(let ((dhc-make-lushflags (concat dhc-make-lushflags " -fopenmp")))
  (dhc-make-with-c++ () () ;;"/usr/lib/gcc/i486-linux-gnu/4.4/libgomp.so"
    prototype-cpp-dummy
    xyz2global-feature-map
    fm-global-decay
    fm-global-update
    fm-local-registration
    )
;;  )

