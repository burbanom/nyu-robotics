;; Feature map and cost map objects.
(libload "libc/constants")
(libload "libnum/linalgebra")
(libload "idx-double")
(libload "idx-float")

#? feature-map
;; A generic structure used to store feature vectors. Has center and
;; scale parameters best for rectangular maps.
(defclass feature-map object
  ((-idx3- (-float-)) data)
  ((-idx1- (-float-)) scale)
  ((-idx1- (-int-)) center)
  ((-idx1- (-int-)) full-dim)
  ((-idx1- (-int-)) half-dim)
  ((-float-) pcl-density)
  ((-int-) features))

#? (new feature-map <half-dim> <scale> <features>)
;; Create a feature map with the given dimensions and scale. For each of the
;; cells there is a single feature vector with <features> entries. This data
;; has no implicit semantics.
(defmethod feature-map feature-map (half-dim- scale- features-)
  ((-idx1- (-int-)) half-dim-)
  ((-idx1- (-float-)) scale-)
  ((-int-) features-)
  (setq half-dim (idx-copy half-dim-))
  (setq scale (idx-copy scale-))
  (setq features features-)
  (setq center (idx-mul half-dim [i 2 1]))
  (setq full-dim (idx-add (idx-mul half-dim [i 2 2]) [i 1 1]))
  (setq data (float-matrix (full-dim 0) (full-dim 1) features))
  (setq pcl-density 0))

#? (==> <feature-map> world2map-cell <world-coord> <cell>)
;; Compute the map cell for the given world coordinate. The origin is always
;; the map center.
(defmethod feature-map world2map-cell (world-coord cell)
  ((-idx1- (-float-)) world-coord)
  ((-idx1- (-int-)) cell)
  (let ((x-offset (/ (world-coord 1) (scale 1)))
        (y-offset (/ (world-coord 0) (scale 0))))
    (cell 0 (- (center 0) y-offset))
    (cell 1 (+ (center 1) x-offset)))
  cell)

#? (==> <feature-map> map-cell2world <cell> <world-coord>)
;; Convert a cell coordinate to world coordinates.
(defmethod feature-map map-cell2world (cell world-coord)
  ((-idx1- (-int-)) cell)
  ((-idx1- (-float-)) world-coord)
  (let ((cell-offset (idx-sub cell center)))
    (world-coord 0 (* (scale 0) (- (cell-offset 0))))
    (world-coord 1 (* (scale 1) (cell-offset 1))))
  world-coord)

#? (==> <feature-map> in-bounds <cell>)
;; Test if cell is within the map area.
(defmethod feature-map in-bounds (cell)
  ((-idx1- (-int-)) cell)
  (and (and (>= (cell 0) 0) (>= (cell 1) 0))
       (and (< (cell 0) (full-dim 0)) (< (cell 1) (full-dim 1)))))

;; Cost map infinite cost marked where there are no observations.
(defconstant "COST_MAP_INF_COST" 9999)

#? cost-map
;; A cost-map is a feature-map with a single value per entry indicating
;; the cost of the cell in the map.
(defclass cost-map feature-map)

#? (new cost-map <fm>)
;; Construct a cost-map from an existing feature-map <fm>.
(defmethod cost-map cost-map (fm)
  ((-obj- (feature-map)) fm)
  (==> this feature-map :fm:half-dim :fm:scale 1)
  (setq center :fm:center)
  (setq pcl-density :fm:pcl-density)
  this)

(de median-rgb (rgb iter m)
  ;; let m = mu
  ;; for N iterations:
  ;;   d_i = dist(rgb_i - mu)
  ;;   w_i = 1. / max(d_i, 1.0e-10)
  ;;   w_i = w_i / sum(w)
  ;;   m = dot(w, rgb)
  ((-idx2- (-ubyte-)) rgb)
  ((-int-) iter)
  ((-idx1- (-float-)) m)
  (let ((d (float-matrix-nc (idx-dim rgb 0)))
        (w (float-matrix-nc (idx-dim rgb 0)))
        (w-sum 0))
    ((-float-) w-sum)
    #{ float* const m = IDX_PTR($m, float); #}
    (for (i 1 iter)
      ((-int-) i)
      (setq w-sum 0)
      (cidx-bloop ("r" ("rgb_r" rgb)("d" d)("w" w))
        (cpheader "#include <cmath>")
        #{ { const float dr = m[0] - rgb_r[0];
             const float dg = m[1] - rgb_r[1];
             const float db = m[2] - rgb_r[2];
             *d = sqrt((dr * dr) + (dg * dg) + (db * db));
             *w = 1.0f / std::max(*d, 1.0e-10f);
             $w_sum += *w; } #})
;;      (cidx-bloop ("r" ("rgb_r" rgb)("d" d)("w" w))
;;        #{ printf("d[%d] = %f, w[%d] = %f\n", r, *d, r, *w); #} )
;;      (printf "iter %d energy = %f\n" i ((idx-sum d)))
      (idx-f1dotc w (/ 1.0 w-sum) w)
      (idx-clear m)
      (cidx-bloop ("r" ("rgb_r" rgb)("w" w))
        #{ for (int c = 0; c < $rgb->dim[1]; ++c)
           { m[c] += static_cast<float>(rgb_r[c]) * *w; } #})))
  m)

(de median-rgb-test (iter num-samples)
  ;; Generate random rgbs with outliers
  (let ((rgb (ubyte-matrix-nc num-samples 3))
        (m (float-matrix 3))
        (r-base (rand 0 245))
        (g-base (rand 0 245))
        (b-base (rand 0 245))
        (rgb-dim-0-inv (/ 1.0 num-samples))
        (num-inliers (to-int (* 0.55 num-samples))))
    (idx-bloop ((r (select (narrow rgb 0 num-inliers 0) 1 0))) (r (rand r-base (+ r-base 10))))
    (idx-bloop ((g (select (narrow rgb 0 num-inliers 0) 1 1))) (g (rand g-base (+ g-base 10))))
    (idx-bloop ((b (select (narrow rgb 0 num-inliers 0) 1 2))) (b (rand b-base (+ b-base 10))))
    (idx-bloop ((rgb (narrow rgb 0 (- num-samples num-inliers) num-inliers)))
      (idx-bloop ((rgb rgb)) (rgb (rand 0 255))))
    (pretty rgb)
    ;; Show raw points.
    (if (not window) (new-window 0 0 (* 255 3) 255))
    (cls)
    ;; rg gb rb
    (idx-bloop ((rgb rgb))
      (let* ((r (rgb 0))(g (rgb 1))(b (rgb 2))
             (r-norm (/ r 255.0))(g-norm (/ g 255.0))(b-norm (/ b 255.0)))
        (color-rgb r-norm g-norm 0)(fill-circle r g 1)
        (color-rgb 0 g-norm b-norm)(fill-circle (+ 255 g) b 1)
        (color-rgb r-norm 0 b-norm)(fill-circle (+ (* 2 255) r) b 1)))
    ;; Compute mean.
    (idx-eloop ((rgb rgb)(m m)) (idx-bloop ((rgb rgb)) (m (+ (m) (* rgb-dim-0-inv (rgb))))))
    ;; Do iterations.
    (for (i 0 iter)
      (median-rgb rgb i m)
      (let* ((r (m 0))(g (m 1))(b (m 2)))
        (color-rgb 0 0 1)(fill-circle r g 2)
        (color-rgb 1 0 0)(fill-circle (+ 255 g) b 2)
        (color-rgb 0 1 0)(fill-circle (+ (* 2 255) r) b 2))
      (pretty m))))

;; Height mean and variance features.
(defconstant "FEATURE_MAP_NUM_PTS"           0)
(defconstant "FEATURE_MAP_SUM_HT"            1)
(defconstant "FEATURE_MAP_SUM_HT_SQ"         2)
;; Height histogram features.
(defconstant "FEATURE_MAP_NUM_HT_BIN_0"      3)
(defconstant "FEATURE_MAP_NUM_HT_BIN_1"      4)
(defconstant "FEATURE_MAP_NUM_HT_BIN_2"      5)
(defconstant "FEATURE_MAP_NUM_HT_BIN_3"      6)
(defconstant "FEATURE_MAP_NUM_HT_BIN_4"      7)
;; RGB median.
(defconstant "FEATURE_MAP_RGB_MEDIAN_BEGIN" 8)
(defconstant "FEATURE_MAP_RGB_MEDIAN_END"  19)
;;
(defconstant "FEATURE_MAP_IDX_COUNT"       23)
(defconstant "FEATURE_MAP_HT_BIN_COUNT"     5)
(defconstant "FEATURE_MAP_HT_BIN_CM"       30)
(defconstant "FEATURE_MAP_RGB_MEDIAN_ITER"  4)
#?  (xyzrgb2feature-map <xyz> <rgb> <transform> <fm>)
;; Fill in feature map for each map cell using the point cloud <xyz>
;;   Features:
;;   [0] - Number of points.
;;   [1] - Sum of heights.
;;   [2] - Sum of squared heights.
;;   [3] - Sum of squared heights.
(de xyzrgb2feature-map (xyz rgb transform fm)
  ((-idx3- (-float-)) xyz)
  ((-idx3- (-ubyte-)) rgb)
  ((-idx2- (-float-)) transform)
  ((-obj- (feature-map)) fm)
  (cpheader "#include <utility>")
  (cpheader "#include <vector>")
  (cpheader "#include <algorithm>")
  (cpheader "#include <stdint.h>")
  (cpheader "#include <cmath>")
  (let* ((map-cell [i 0 0])               ;; Target cell for xyz point.
         (xyz-tform (float-matrix-nc 3))  ;; Transformed xyz point.
         (tform-rot (narrow (narrow transform 0 3 0) 1 3 0))
         (tform-trans (select (narrow transform 0 3 0) 1 3))
         (rgb-binned (ubyte-matrix-nc 1 3))
         (fm-data :fm:data)
         (ht-bin-cm (/ @FEATURE_MAP_HT_BIN_CM 100.0))
         (ht-bin-base-idx @FEATURE_MAP_NUM_HT_BIN_0)
         (ht-bin-max-offset (- @FEATURE_MAP_HT_BIN_COUNT 1))
         (rgb-bin-base-idx @FEATURE_MAP_RGB_MEDIAN_BEGIN)
         (m (float-matrix-nc 3))
         (xyz-count 0))
    ((-float-) ht-bin-cm)
    ((-int-) ht-bin-base-idx)
    ((-int-) ht-bin-max-offset)
    ((-int-) rgb-bin-base-idx)
    ((-int-) xyz-count)
;;    (printf "ht-bin-cm = %f, ht-bin-max-offset = %d\n" ht-bin-cm ht-bin-max-offset)
    (idx-clear fm-data)
    #{ const int* const map_cell = IDX_PTR($map_cell, int);
       typedef std::pair<uint32_t, unsigned char*> RgbBinRecord;
       std::vector<RgbBinRecord> rgbBinRecords; #}
    ;; For all point cloud points.
    (idx-bloop ((xyz (narrow xyz 2 3 0))(rgb rgb))
      (idx-bloop ((xyz xyz)(rgb rgb))
        ;; Check not nan-tastic.
        (when (= 0 (to-int #{ std::isnan(*IDX_PTR($xyz, float)) #} ))
          (incr xyz-count)
          ;; Transform to robot world.
          (idx-m2dotm1 tform-rot xyz xyz-tform)
          (idx-add xyz-tform tform-trans xyz-tform)
          ;; Find target cell.
          (==> fm world2map-cell xyz-tform map-cell)
          ;; Check cell in bounds.
          (if (==> fm in-bounds map-cell)
            (let* ((h (* -1 (xyz-tform 2)))
                   (ht-bin-offset (to-int (+ (min (max (/ h ht-bin-cm) 0) ht-bin-max-offset) 0.5)))
                   (ht-bin-idx (+ ht-bin-base-idx ht-bin-offset))
                   (fm-pt (select (select :fm:data 0 (map-cell 0)) 0 (map-cell 1))))
              ((-int-) ht-bin-offset)
              ((-int-) ht-bin-idx)
              ;; Increment count.
              (fm-pt 0 (+ (fm-pt 0) 1))
              ;; Sum height.
              (fm-pt 1 (+ (fm-pt 1) h))
              ;; Sum square height.
              (fm-pt 2 (+ (fm-pt 2) (* h h)))
              ;; Increment bin for this point.
              (fm-pt ht-bin-idx (+ (fm-pt ht-bin-idx) 1))
              ;; Store pointer to RGB keyed by map cell and bin.
              #{ const uint32_t key = map_cell[0] << 20 | map_cell[1] << 8 | $ht_bin_offset;
                 rgbBinRecords.push_back(std::make_pair(key, IDX_PTR($rgb, unsigned char))); #})))))
;;              )))))
    ;; Sort binned rgb pixels and traverse image to compute median RGB.
    #{ if (!rgbBinRecords.empty())
       {
         // Sort records in order of traversing map r, c.
         std::sort(rgbBinRecords.begin(), rgbBinRecords.end());
//         const int rgbBinRecordsSize = static_cast<int>(rgbBinRecords.size());
//         printf("rgbBinRecords.size() = %d\n", rgbBinRecordsSize));
         float* const fm_data = IDX_PTR($fm_data, float);
         const int fm_p0 = $fm_data->mod[0];
         const int fm_p1 = $fm_data->mod[1];
         const int fm_p2 = $fm_data->mod[2];
         // Setup iteration over map cells.
         std::vector<RgbBinRecord>::const_iterator rec = rgbBinRecords.begin();
         const std::vector<RgbBinRecord>::const_iterator recEnd = rgbBinRecords.end();
         uint32_t keyMapCell = rec->first & ~0xFF;
         uint32_t keyCellBin = rec->first &  0xFF;
         uint32_t fm_r = keyMapCell >> 20;
         uint32_t fm_c = keyMapCell >>  8 & 0xFFF;
         // Get pointer to first pixel.
         float* fm_cell = fm_data + (fm_p0 * fm_r) + (fm_p1 * fm_c);
         int bin_size = static_cast<int>(fm_cell[fm_p2 * ($ht_bin_base_idx + keyCellBin)] + 0.5f);
//         printf("(r, c) = (%d, %d), bin = %d\n", fm_r, fm_c, keyCellBin);
//         printf("bin_size_offset = %d\n", $ht_bin_base_idx + keyCellBin);
//         printf("fm_cell = ( ");
//         for (int i = 0; i < 21; ++i)
//         {
//           printf("%f ", fm_cell[fm_p2 * i]);
//         }
//         printf("\n");
         // Initialize storage for median calculation.
         Midx_init_dim2($rgb_binned, bin_size, 3);
         unsigned char* rgb_binned = IDX_PTR($rgb_binned, unsigned char);
         float* m = IDX_PTR($m, float);
         memset(m, 0, 3 * sizeof(float));
         // For all rgb pixel records, map them into rgb_binned.
         for (; rec != recEnd; ++rec, rgb_binned += $rgb_binned->mod[0])
         {
           uint32_t keyMapCellPx = rec->first & ~0xFF;
           uint32_t keyCellBinPx = rec->first &  0xFF;
//           printf("keyMapCellPx = %d, keyCellBinPx = %d\n", keyMapCellPx, keyCellBinPx);
           // See if we are not on the same cell or the same bin.
           if ((keyMapCellPx != keyMapCell) || (keyCellBinPx != keyCellBin))
           {
//             printf("**new bin: keyMapCell = %d, keyCellBin = %d\n", keyMapCell, keyCellBin);
             // Compute mean.
             m[0] /= bin_size; m[1] /= bin_size; m[2] /= bin_size;
             // Process median.
             #}
;;             (printf "(idx-dim rgb-binned) = (%d %d)\n"
;;                     (idx-dim rgb-binned 0) (idx-dim rgb-binned 1))
;;             (idx-bloop ((rgb-binned rgb-binned))
;;               (printf "(%d, %d, %d)\n" (rgb-binned 0)(rgb-binned 1)(rgb-binned 2)))
             (median-rgb rgb-binned @FEATURE_MAP_RGB_MEDIAN_ITER m)
             #{
             float* const fm_cell_rgb_bin = fm_cell + $rgb_bin_base_idx + (3 * keyCellBin);
             memcpy(fm_cell_rgb_bin, IDX_PTR($m, float), 3 * sizeof(float));
             // Setup for next bin.
             keyMapCell = keyMapCellPx;
             keyCellBin = keyCellBinPx;
             fm_r = keyMapCell >> 20;
             fm_c = keyMapCell >>  8 & 0xFFF;
             fm_cell = fm_data + (fm_p0 * fm_r) + (fm_p1 * fm_c);
             bin_size = static_cast<int>(fm_cell[fm_p2 * ($ht_bin_base_idx + keyCellBin)] + 0.5f);
             Midx_init_dim2($rgb_binned, bin_size, 3);
             rgb_binned = IDX_PTR($rgb_binned, unsigned char);
             memset(m, 0, 3 * sizeof(float));
           }
           // Keep gathering rgb for the current bin.
//           printf("(r, c) = (%d, %d), bin = %d\n", fm_r, fm_c, keyCellBin);
           memcpy(rgb_binned, rec->second, 3);
           m[0] += rec->second[0]; m[1] += rec->second[1]; m[2] += rec->second[2];
         }
         // Median one more time for the final homies in the buffer.
         {
           // Compute mean.
           m[0] /= bin_size; m[1] /= bin_size; m[2] /= bin_size;
           #} (median-rgb rgb-binned @FEATURE_MAP_RGB_MEDIAN_ITER m) #{
           float* const fm_cell_rgb_bin = fm_cell + $rgb_bin_base_idx + (3 * keyCellBin);
           memcpy(fm_cell_rgb_bin, IDX_PTR($m, float), 3 * sizeof(float));
         }
       }
    #}
    ;; Compute density.
    (setq :fm:pcl-density (/ xyz-count (* (idx-dim xyz 0) (idx-dim xyz 1)))))
  ;;(printf ":fm:pcl-density %f\n" :fm:pcl-density)
  fm)

#? (feature-map2cost-map <fm-data> <cm-data>)
;; Compute the cost-map for the given feature map.
(de feature-map2cost-map (fm-data cm-data)
  ((-idx3- (-float-)) fm-data)
  ((-idx3- (-float-)) cm-data)
  (idx-bloop ((cell-r fm-data) (cost-r cm-data))
    (idx-bloop ((cell cell-r) (cost cost-r))
      (let ((num (cell 0))
            (sum_x (cell 1))
            (sum_xx (cell 2)))
        ;; Store infinite cost for no points.
        (if (= 0 num)
          (cost 0 @COST_MAP_INF_COST)

          ;; Else store average height plus variance.
          ;; Var = ((Sum(X_i^2) - (2 * Mu * Sum(X_i))) / N) + Mu^2
          (let* ((mu (/ sum_x num))
                 (var (+ (/ (- sum_xx (* 2 (* mu sum_x))) num) (* mu mu))))
              (cost 0 (+ (abs mu) var)))))))
  ())

#? (atan2 <y> <x>)
;; Compute arc tangent with two parameters.
(de atan2 (y x) ((-double-) y) ((-double-) x)
  (cpheader "#include <cmath>")
  (to-double #{ atan2($y, $x) #}))

#? (cost-map2rgb <max-cost> <cm> <cm-rgb>)
;; Convert the cost-map into a display image.
(de cost-map2rgb (max-cost cm cm-rgb)
  ((-float-) max-cost)
  ((-obj- (cost-map)) cm)
  ((-idx3- (-int-)) cm-rgb)
  (idx-bloop ((cost-r :cm:data) (cost-rgb-r cm-rgb))
    (idx-bloop ((cost cost-r) (cost-rgb cost-rgb-r))
      (if (not (= @COST_MAP_INF_COST (cost 0)))
        ;; Shade of gray based on cost in range [0, max-cost].
        (let* ((color (min 255 (max 0 (* (/ (cost 0) max-cost) 255)))))
          (idx-bloop ((rgb cost-rgb)) (rgb color)))
        ;; Else blue.
        (idx-copy [i 0 0 255] cost-rgb))))
  cm-rgb)

#? (draw-correspondences <pts-global> <pts-local> <center> <scale>)
;; Display point correspondences.
(de draw-correspondences (pts-global pts-local center scale)
  (color-rgb 1 0.5 1)
  (fill-circle (center 0) (center 1) 3)
  (idx-bloop ((pt-global pts-global) (pt-local pts-local))
    ;; Draw global.
    (color-rgb 0 0 1)
    (fill-circle (+ (center 0) (* (   pt-global 0)  scale))
                 (+ (center 1) (* (- (pt-global 1)) scale)) 3)
    ;; Draw local.
    (color-rgb 1 0 0)
    (fill-circle (+ (center 0) (*    (pt-local 0)  scale))
                 (+ (center 1) (* (- (pt-local 1)) scale)) 2)
    ;; Draw offset line.
    (color-rgb 0 0 0)
    (draw-line (+ (center 0) (* (   pt-global 0)  scale))
               (+ (center 1) (* (- (pt-global 1)) scale))
               (+ (center 0) (* (   pt-local 0)  scale))
               (+ (center 1) (* (- (pt-local 1)) scale))))
  ())

#? (map-registration <pts-global> <pts-local> <rot-mat> <offset>)
;; Takes two sets of point correspondences and computes a rigid transformation
;; that takes each local point to its corresponding global point. When an exact
;; solution is not possible, a least squares approximation is given.
(de map-registration (pts-global pts-local rot-mat offset)
  ((-idx2- (-double-)) pts-global)
  ((-idx2- (-double-)) pts-local)
  ((-idx2- (-double-)) rot-mat)
  ((-idx1- (-double-)) offset)
  (let ((obs-mat (double-matrix (* 2 (idx-dim pts-global 0)) 4))
        (b-mat   (double-matrix (* 2 (idx-dim pts-global 0))))
        (x       (double-matrix-nc 4)))
    ((-idx1- (-double-)) x)
    ;; Setup obs-mat from points.
    (idx-bloop ((obs-x-r (narrow obs-mat 0 (idx-dim pts-global 0) 0))
                (obs-y-r (narrow obs-mat 0 (idx-dim pts-global 0) (idx-dim pts-global 0)))
                (b-x-r (narrow b-mat 0 (idx-dim pts-global 0) 0))
                (b-y-r (narrow b-mat 0 (idx-dim pts-global 0) (idx-dim pts-global 0)))
                (pt-global pts-global)
                (pt-local pts-local))
        (obs-x-r 0 (pt-local 0)) (obs-x-r 1 (- (pt-local 1))) (obs-x-r 2 1) (obs-x-r 3 0)
        (obs-y-r 0 (pt-local 1)) (obs-y-r 1    (pt-local 0))  (obs-y-r 2 0) (obs-y-r 3 1)
        (b-x-r (pt-global 0))
        (b-y-r (pt-global 1)))
;;    (pretty obs-mat)
;;    (pretty b-mat)
    ;; Solve using SVD.
    (solve-sv-inplace obs-mat b-mat x)
;;    (pretty x)
    ;; Set return values.
    (let ((rot-params (narrow x 0 2 0))
          (offset-params (narrow x 0 2 2))
          (rot-norm-sq [d@ 0]))
      ;; Normalize rotation part and set offset part.
      (idx-m1dotm1 rot-params rot-params rot-norm-sq)
      (idx-d1dotc rot-params (/ 1.0 (sqrt (rot-norm-sq))) rot-params)
      (rot-mat 0 0 (rot-params 0)) (rot-mat 0 1 (- (rot-params 1)))
      (rot-mat 1 0 (rot-params 1)) (rot-mat 1 1    (rot-params 0))
      (idx-copy offset-params offset)))
  ())

;; Test cost map registration.
(de map-registration-test ()
  ;; Generate some points and then some distorted points.
  (let* ((pts-count 100)
         (pts-global (double-matrix pts-count 2))
         (pts-local (double-matrix pts-count 2))
         (tform-guess (double-matrix 2 2))
         (offset-guess (double-matrix-nc 2))
         (tform-compute (double-matrix-nc 2 2))
         (offset-compute (double-matrix-nc 2))
         (offset (double-matrix-nc 2))
         (theta 0)
         (window-size [i 640 480])
         (window-center (int-matrix 2))
         (draw-scale 5))
    (window-center 0 (* 0.5 (window-size 0)))
    (window-center 1 (* 0.5 (window-size 1)))
    (seed (time))
    ;; Make guess identity.
    (for (i 0 (- (idx-dim tform-guess 0) 1)) (tform-guess i i 1))
    ;; Setup offset and rotation theta.
    (offset 0 (to-int (rand -2 2)))
    (offset 1 (to-int (rand -2 2)))
    (setq theta (rand 0 0.25))
    ;;(idx-clear offset)
    ;; Create correspondences.
    (idx-bloop ((pt-global pts-global) (pt-local pts-local))
      (let ((x (to-int (rand -20 20)))
            (y (to-int (rand -20 20))))
        (pt-global 0 x) (pt-global 1 y)
        (let ((offset-prime (float-matrix-nc 2))
              (theta-prime (* theta (rand 0.8 1.2))))
          ;; Create purturbed offset.
          (offset-prime 0 (+ (offset 0) (rand -0.5 0.5)))
          (offset-prime 1 (+ (offset 1) (rand -0.5 0.5)))
          ;;(idx-copy offset offset-prime)
          ;; Compute transformed point.
          (pt-local 0 (+ (- (* (cos theta-prime) x) (* (sin theta-prime) y)) (offset-prime 0)))
          (pt-local 1 (+ (+ (* (sin theta-prime) x) (* (cos theta-prime) y)) (offset-prime 1))))))

    ;; Draw the points.
    (if (= () window) (new-window (window-size 0) (window-size 1)))
    (cls)
    (draw-correspondences pts-global pts-local window-center draw-scale)

    ;; Compute transformation.
    (map-registration pts-global pts-local tform-compute offset-compute)
    ;; Show points.
    (let ((local-tform (double-matrix-nc 2)))
      (color-rgb 0 1 0)
      (idx-bloop ((pt-local pts-local))
        ;; Compute local-tform.
        (idx-m2dotm1 tform-compute pt-local local-tform)
        (idx-add local-tform offset-compute local-tform)
        ;; Draw local-tform.
        (fill-circle (+ (window-center 0) (* (   local-tform 0)  draw-scale))
                     (+ (window-center 1) (* (- (local-tform 1)) draw-scale)) 2))))
  ())

(dhc-make-with-c++ () ()
  (feature-map
    feature-map
    world2map-cell
    map-cell2world
    in-bounds)
  (cost-map
    cost-map)
  median-rgb
  xyzrgb2feature-map
  feature-map2cost-map
  cost-map2rgb
  atan2
  map-registration)

