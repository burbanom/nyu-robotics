;; Feature map and cost map objects.
(libload "libc/constants")
(libload "libnum/linalgebra")
(libload "idx-double")

#? feature-map
;; A generic structure used to store feature vectors. Has center and
;; scale parameters best for rectangular maps.
(defclass feature-map object
  ((-idx3- (-float-)) data)
  ((-idx1- (-float-)) scale)
  ((-idx1- (-int-)) center)
  ((-idx1- (-int-)) full-dim)
  ((-idx1- (-int-)) half-dim)
  ((-float-) pcl-density)
  ((-int-) features)
  )

#? (new feature-map <half-dim> <scale> <features>)
;; Create a feature map with the given dimensions and scale. For each of the
;; cells there is a single feature vector with <features> entries. This data
;; has no implicit semantics.
(defmethod feature-map feature-map (half-dim- scale- features-)
  ((-idx1- (-int-)) half-dim-)
  ((-idx1- (-float-)) scale-)
  ((-int-) features-)
  (setq half-dim (idx-copy half-dim-))
  (setq scale (idx-copy scale-))
  (setq features features-)
  (setq center (idx-mul half-dim [i 2 1]))
  (setq full-dim (idx-add (idx-mul half-dim [i 2 2]) [i 1 1]))
  (setq data (float-matrix (full-dim 0) (full-dim 1) features))
  (setq pcl-density 0)
  )

#? (==> <feature-map> world2map-cell <world-coord> <cell>)
;; Compute the map cell for the given world coordinate. The origin is always
;; the map center.
(defmethod feature-map world2map-cell (world-coord cell)
  ((-idx1- (-float-)) world-coord)
  ((-idx1- (-int-)) cell)
  (let ((x-offset (/ (world-coord 1) (scale 1)))
        (y-offset (/ (world-coord 0) (scale 0))))
    (cell 0 (- (center 0) y-offset))
    (cell 1 (+ (center 1) x-offset))
    )
  cell
  )

#? (==> <feature-map> map-cell2world <cell> <world-coord>)
;; Convert a cell coordinate to world coordinates.
(defmethod feature-map map-cell2world (cell world-coord)
  ((-idx1- (-int-)) cell)
  ((-idx1- (-float-)) world-coord)
  (let ((cell-offset (idx-sub cell center)))
    (world-coord 0 (* (scale 0) (- (cell-offset 0))))
    (world-coord 1 (* (scale 1) (cell-offset 1)))
    )
  world-coord
  )

#? (==> <feature-map> in-bounds <cell>)
;; Test if cell is within the map area.
(defmethod feature-map in-bounds (cell)
  ((-idx1- (-int-)) cell)
  (and (and (>= (cell 0) 0) (>= (cell 1) 0))
       (and (< (cell 0) (full-dim 0)) (< (cell 1) (full-dim 1))))
  )

;; Cost map infinite cost marked where there are no observations.
(defconstant "COST_MAP_INF_COST" 9999)

#? cost-map
;; A cost-map is a feature-map with a single value per entry indicating
;; the cost of the cell in the map.
(defclass cost-map feature-map)

#? (new cost-map <fm>)
;; Construct a cost-map from an existing feature-map <fm>.
(defmethod cost-map cost-map (fm)
  ((-obj- (feature-map)) fm)
  (==> this feature-map :fm:half-dim :fm:scale 1)
  (setq center :fm:center)
  (setq pcl-density :fm:pcl-density)
  this
  )

;; Height mean and variance features.
(defconstant "FEATURE_MAP_0_NUM_PTS"      0)
(defconstant "FEATURE_MAP_1_SUM_HT"       1)
(defconstant "FEATURE_MAP_2_SUM_HT_SQ"    2)
;; Height histogram features.
(defconstant "FEATURE_MAP_3_NUM_HT_BIN_0" 3)
(defconstant "FEATURE_MAP_4_NUM_HT_BIN_1" 4)
(defconstant "FEATURE_MAP_5_NUM_HT_BIN_2" 5)
(defconstant "FEATURE_MAP_6_NUM_HT_BIN_3" 6)
(defconstant "FEATURE_MAP_7_NUM_HT_BIN_4" 7)
(defconstant "FEATURE_MAP_IDX_COUNT"      8)
(defconstant "FEATURE_MAP_HT_BIN_COUNT"   5)
(defconstant "FEATURE_MAP_HT_BIN_CM"     60)
#?  (xyz2feature-map <xyz> <transform> <fm>)
;; Fill in feature map for each map cell using the point cloud <xyz>
;;   Features:
;;   [0] - Number of points.
;;   [1] - Sum of heights.
;;   [2] - Sum of squared heights.
;;   [3] - Sum of squared heights.
(de xyz2feature-map (xyz transform fm)
  ((-idx2- (-float-)) xyz)
  ((-idx2- (-float-)) transform)
  ((-obj- (feature-map)) fm)
  (let ((map-cell [i 0 0])               ;; Target cell for xyz point.
        (xyz-tform (float-matrix-nc 3))  ;; Transformed xyz point.
        (tform-rot (narrow (narrow transform 0 3 0) 1 3 0))
        (tform-trans (select (narrow transform 0 3 0) 1 3))
        (ht-bin-cm (/ @FEATURE_MAP_HT_BIN_CM 100.0))
        (ht-bin-max-offset (- @FEATURE_MAP_HT_BIN_COUNT 1))
        )
    (idx-clear :fm:data)
    ;; Compute density.
    (setq :fm:pcl-density (/ (idx-dim xyz 0) (* 640 480)))
    ;;(printf ":fm:pcl-density %f\n" :fm:pcl-density)
    ;; For all point cloud points.
    (idx-bloop ((xyz xyz))
      ;; Transform to robot world.
      (idx-m2dotm1 tform-rot xyz xyz-tform)
      (idx-add xyz-tform tform-trans xyz-tform)
      ;; Find target cell.
      (==> fm world2map-cell xyz-tform map-cell)
      ;; Check cell in bounds.
      (if (==> fm in-bounds map-cell)
        (let* ((h (* -1 (xyz-tform 2)))
               (ht-bin-offset (min (max (/ h ht-bin-cm) 0) ht-bin-max-offset))
               (ht-bin-dix (+ @FEATURE_MAP_3_NUM_HT_BIN_0 ht-bin-max-offset))
               (fm-pt (select (select :fm:data 0 (map-cell 0)) 0 (map-cell 1)))
               )
          ;; Increment count.
          (fm-pt 0 (+ (fm-pt 0) 1))
          ;; Sum height.
          (fm-pt 1 (+ (fm-pt 1) h))
          ;; Sum square height.
          (fm-pt 2 (+ (fm-pt 2) (* h h)))
          ;; Increment bin for this point.
          (fm-pt ht-bin-dix (+ (fm-pt ht-bin-dix) 1))
          )
        ()
        )
      )
    )
  fm
  )

#? (feature-map2cost-map <fm-data> <cm-data>)
;; Compute the cost-map for the given feature map.
(de feature-map2cost-map (fm-data cm-data)
  ((-idx3- (-float-)) fm-data)
  ((-idx3- (-float-)) cm-data)
  (idx-bloop ((cell-r fm-data) (cost-r cm-data))
    (idx-bloop ((cell cell-r) (cost cost-r))
      (let ((num (cell 0))
            (sum_x (cell 1))
            (sum_xx (cell 2)))
        ;; Store infinite cost for no points.
        (if (= 0 num)
          (cost 0 @COST_MAP_INF_COST)

          ;; Else store average height plus variance.
          ;; Var = ((Sum(X_i^2) - (2 * Mu * Sum(X_i))) / N) + Mu^2
          (let* ((mu (/ sum_x num))
                 (var (+ (/ (- sum_xx (* 2 (* mu sum_x))) num) (* mu mu))))
              (cost 0 (+ (abs mu) var))
            )
          )
        )
      )
    )
  ()
  )

#? (atan2 <y> <x>)
;; Compute arc tangent with two parameters.
(de atan2 (y x) ((-double-) y) ((-double-) x)
  (cpheader "#include <cmath>")
  (to-double #{ atan2($y, $x) #})
  )

#? (cost-map2rgb <max-cost> <cm> <cm-rgb>)
;; Convert the cost-map into a display image.
(de cost-map2rgb (max-cost cm cm-rgb)
  ((-float-) max-cost)
  ((-obj- (cost-map)) cm)
  ((-idx3- (-int-)) cm-rgb)
  (idx-bloop ((cost-r :cm:data) (cost-rgb-r cm-rgb))
    (idx-bloop ((cost cost-r) (cost-rgb cost-rgb-r))
      (if (not (= @COST_MAP_INF_COST (cost 0)))
        ;; Shade of gray based on cost in range [0, max-cost].
        (let* ((color (min 255 (max 0 (* (/ (cost 0) max-cost) 255)))))
          (idx-bloop ((rgb cost-rgb)) (rgb color))
          )
        ;; Else blue.
        (idx-copy [i 0 0 255] cost-rgb)
        )
      )
    )
  cm-rgb
  )

#? (draw-correspondences <pts-global> <pts-local> <center> <scale>)
;; Display point correspondences.
(de draw-correspondences (pts-global pts-local center scale)
  (color-rgb 1 0.5 1)
  (fill-circle (center 0) (center 1) 3)
  (idx-bloop ((pt-global pts-global) (pt-local pts-local))
    ;; Draw global.
    (color-rgb 0 0 1)
    (fill-circle (+ (center 0) (* (   pt-global 0)  scale))
                 (+ (center 1) (* (- (pt-global 1)) scale)) 3)
    ;; Draw local.
    (color-rgb 1 0 0)
    (fill-circle (+ (center 0) (*    (pt-local 0)  scale))
                 (+ (center 1) (* (- (pt-local 1)) scale)) 2)
    ;; Draw offset line.
    (color-rgb 0 0 0)
    (draw-line (+ (center 0) (* (   pt-global 0)  scale))
               (+ (center 1) (* (- (pt-global 1)) scale))
               (+ (center 0) (* (   pt-local 0)  scale))
               (+ (center 1) (* (- (pt-local 1)) scale)))
    )
  ()
  )

#? (map-registration <pts-global> <pts-local> <rot-mat> <offset>)
;; Takes two sets of point correspondences and computes a rigid transformation
;; that takes each local point to its corresponding global point. When an exact
;; solution is not possible, a least squares approximation is given.
(de map-registration (pts-global pts-local rot-mat offset)
  ((-idx2- (-double-)) pts-global)
  ((-idx2- (-double-)) pts-local)
  ((-idx2- (-double-)) rot-mat)
  ((-idx1- (-double-)) offset)
  (let ((obs-mat (double-matrix (* 2 (idx-dim pts-global 0)) 4))
        (b-mat   (double-matrix (* 2 (idx-dim pts-global 0))))
        (x       (double-matrix-nc 4))
        )
    ((-idx1- (-double-)) x)
    ;; Setup obs-mat from points.
    (idx-bloop ((obs-x-r (narrow obs-mat 0 (idx-dim pts-global 0) 0))
                (obs-y-r (narrow obs-mat 0 (idx-dim pts-global 0) (idx-dim pts-global 0)))
                (b-x-r (narrow b-mat 0 (idx-dim pts-global 0) 0))
                (b-y-r (narrow b-mat 0 (idx-dim pts-global 0) (idx-dim pts-global 0)))
                (pt-global pts-global)
                (pt-local pts-local)
                )
        (obs-x-r 0 (pt-local 0)) (obs-x-r 1 (- (pt-local 1))) (obs-x-r 2 1) (obs-x-r 3 0)
        (obs-y-r 0 (pt-local 1)) (obs-y-r 1    (pt-local 0))  (obs-y-r 2 0) (obs-y-r 3 1)
        (b-x-r (pt-global 0))
        (b-y-r (pt-global 1))
      )
;;    (pretty obs-mat)
;;    (pretty b-mat)
    ;; Solve using SVD.
    (solve-sv-inplace obs-mat b-mat x)
;;    (pretty x)
    ;; Set return values.
    (let ((rot-params (narrow x 0 2 0))
          (offset-params (narrow x 0 2 2))
          (rot-norm-sq [d@ 0])
          )
      ;; Normalize rotation part and set offset part.
      (idx-m1dotm1 rot-params rot-params rot-norm-sq)
      (idx-d1dotc rot-params (/ 1.0 (sqrt (rot-norm-sq))) rot-params)
      (rot-mat 0 0 (rot-params 0)) (rot-mat 0 1 (- (rot-params 1)))
      (rot-mat 1 0 (rot-params 1)) (rot-mat 1 1    (rot-params 0))
      (idx-copy offset-params offset)
      )
    )
  ()
  )

;; Test cost map registration.
(de map-registration-test ()
  ;; Generate some points and then some distorted points.
  (let* ((pts-count 100)
         (pts-global (double-matrix pts-count 2))
         (pts-local (double-matrix pts-count 2))
         (tform-guess (double-matrix 2 2))
         (offset-guess (double-matrix-nc 2))
         (tform-compute (double-matrix-nc 2 2))
         (offset-compute (double-matrix-nc 2))
         (offset (double-matrix-nc 2))
         (theta 0)
         (window-size [i 640 480])
         (window-center (int-matrix 2))
         (draw-scale 5)
         )
    (window-center 0 (* 0.5 (window-size 0)))
    (window-center 1 (* 0.5 (window-size 1)))
    (seed (time))
    ;; Make guess identity.
    (for (i 0 (- (idx-dim tform-guess 0) 1)) (tform-guess i i 1))
    ;; Setup offset and rotation theta.
    (offset 0 (to-int (rand -2 2)))
    (offset 1 (to-int (rand -2 2)))
    (setq theta (rand 0 0.25))
    ;;(idx-clear offset)
    ;; Create correspondences.
    (idx-bloop ((pt-global pts-global) (pt-local pts-local))
      (let ((x (to-int (rand -20 20)))
            (y (to-int (rand -20 20)))
            )
        (pt-global 0 x) (pt-global 1 y)
        (let ((offset-prime (float-matrix-nc 2))
              (theta-prime (* theta (rand 0.8 1.2)))
              )
          ;; Create purturbed offset.
          (offset-prime 0 (+ (offset 0) (rand -0.5 0.5)))
          (offset-prime 1 (+ (offset 1) (rand -0.5 0.5)))
          ;;(idx-copy offset offset-prime)
          ;; Compute transformed point.
          (pt-local 0 (+ (- (* (cos theta-prime) x) (* (sin theta-prime) y)) (offset-prime 0)))
          (pt-local 1 (+ (+ (* (sin theta-prime) x) (* (cos theta-prime) y)) (offset-prime 1)))
          )
        )
      )

    ;; Draw the points.
    (if (= () window) (new-window (window-size 0) (window-size 1)))
    (cls)
    (draw-correspondences pts-global pts-local window-center draw-scale)

    ;; Compute transformation.
    (map-registration pts-global pts-local tform-compute offset-compute)
    ;; Show points.
    (let ((local-tform (double-matrix-nc 2)))
      (color-rgb 0 1 0)
      (idx-bloop ((pt-local pts-local))
        ;; Compute local-tform.
        (idx-m2dotm1 tform-compute pt-local local-tform)
        (idx-add local-tform offset-compute local-tform)
        ;; Draw local-tform.
        (fill-circle (+ (window-center 0) (* (   local-tform 0)  draw-scale))
                     (+ (window-center 1) (* (- (local-tform 1)) draw-scale)) 2)
        )
      )
    )
  ()
  )

(dhc-make-with-c++ () ()
  (feature-map
    feature-map
    world2map-cell
    map-cell2world
    in-bounds
    )
  (cost-map
    cost-map
    )
  xyz2feature-map
  feature-map2cost-map
  cost-map2rgb
  atan2
  map-registration
  )

