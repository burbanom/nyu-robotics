(addpath (concat (getenv "HOME") "/Turtlebot/nyu-robotics/lush/local"))

(libload "roomba/roomba")
(libload "roomba-odometry")
(libload "roomba-drive")
(libload "freenect/freenect")
(libload "pcloud/pcloud")
(libload "pcloud2")
(libload "astar/a-star-test")
(libload "opencv2/cv-surf")
(libload "libc/stopwatch")



;; Main here!
;; Assume that the kinect is 29cm above ground.

#? (demo-dai)
;;Demo 1
;;
(de demo-dai (&optional roombap)
  (when (not window) (new-window 0 0 1280 480 "asd"))
  (let* ((r (when roombap (new roomba "/dev/ttyUSB0")))
	 (q ())
	 (od ())
	 (time ())
	 (direction 0.0)
	 (angle 0.0)
	 (image-old ())
	 (d (float-matrix 480 640))
	 (rgb (float-matrix 307200 3))
	 (rcd (float-matrix 307200 3))
	 (xyz (float-matrix 307200 3))
	 (rgbxyz (float-matrix 480 640 7))
	 (stop ())
	 (robot-height 0.45)
	 (cellsize 0.1)
	 (costmap-xsize (/ 10 cellsize))
	 (costmap-ysize (/ 10 cellsize))
	 (mp (float-matrix costmap-xsize costmap-ysize 3))
	 (costmap (float-matrix costmap-xsize costmap-ysize 2)))
    ;; turn kinect on.
    (when r (==> r kinect-on))
    ;; create objects
    (setq q (new freenect 0))
    ;;(setq time (new stopwatch))
    ;; infinite loop)
    (while (not stop)
      (==> q update)
      (let ((image (==> q get-rgb))
	    (rawd (==> q get-depth)))
	;;(==> time reset)
	;;(rgb-draw-matrix 0 0 image)
	(pcloud-image2rcdrgb image rawd 2000 rcd rgb)
	(pcloud-rcd2xyz rcd xyz kinect-d2m kinect-rcd2xyz turtlebot-c2v)
	(idx-clear mp)
	(pcloud-xyz2map xyz rgb mp 100 50 angle cellsize cellsize robot-height)
	(rgb-draw-matrix 0 0 (mark-ground xyz rcd image 0.35 robot-height))
	(map2cost mp costmap 0.2)
	(add-safe-margin costmap)
	(setq direction (costmap2planning costmap 0.2 50 50))
	(when r (drive r direction))
	(display-costmap 640 0 costmap 2)
	;;(print "FPS: "  (/1 (==> time get)))
	))
    ())
)


#? (demo-dai2)
;;Demo 2(vo)
;;Unstable :-(
(de demo-dai2 (&optional roombap)
  (when (not window) (new-window 0 0 1280 480 "asd"))
  (let* ((r (when roombap (new roomba "/dev/ttyUSB0")))
	 (q ())
	 (od ())
	 (time ())
	 (direction 0.0)
	 (angle 0.0)
	 (image-old ())
	 (d (float-matrix 480 640))
	 (rgb (float-matrix 307200 3))
	 (rcd (float-matrix 307200 3))
	 (xyz (float-matrix 307200 3))
	 (rgbxyz (float-matrix 480 640 7))
	 (stop ())
	 (robot-height 0.45)
	 (cellsize 0.1)
	 (costmap-xsize 100)
	 (costmap-ysize 100)
	 (mp (float-matrix costmap-xsize costmap-ysize 3))
	 (costmap (float-matrix costmap-xsize costmap-ysize 2))
	 (data1 ())
	 (data2 ())
	 (data3 ()))
    ;; turn kinect on.
    (when r (==> r kinect-on))
    ;; create objects
    (setq q (new freenect 0))
    (setq od (new odometry 0 0 0 0))
    (setq image-old (==> q get-rgb))
    ;;(setq time (new stopwatch))
    ;; infinite loop)
    (while (not stop)
      (==> q update)
      (let ((image (==> q get-rgb))
	    (rawd (==> q get-depth)))
	(pcloud-image2rcdrgb image rawd 2000 rcd rgb)
	(pcloud-rcd2xyz rcd xyz kinect-d2m kinect-rcd2xyz turtlebot-c2v)
	(idx-clear mp)
	(setq rgbxyz (rcdrgbxyz2rgbxyz rcd rgb xyz))
	(when r 
	      (setq data1 (==> od wheel-update r))
	      (setq data2 (==> od gyro-update r))
	      ;;(setq data3 (==> od vo-surf-update image image-old rgbxyz))
	      (==> od update data1 data2 data3))
      
	(pcloud-xyz2map xyz rgb mp 100 50 angle cellsize cellsize robot-height)
	(rgb-draw-matrix 0 0 (mark-ground xyz rcd image 0.35 robot-height))
	(map2cost mp costmap 0.2)
	(add-safe-margin costmap)
	(setq direction (costmap2planning costmap 0.2 50 50))
	(when r (drive r direction))
	(==> od display 640 0)
	(setq image-old image)
	;;(print "FPS: "  (==> time get))
	))
    ())
)