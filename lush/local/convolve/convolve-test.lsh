(libload "convolve")
(libload "libidx/idx-double")
(libload "libidx/idx-float")

(defparameter 
 filters4x4
 [ [[-1 -2 2 1] [-2 -4 4 2] [-2 -4 4 2] [-1 -2 2 1]]
   [[-1 -2 -2 -1][-2 -4 -4 -2][2 4 4 2][1 2 2 1]]
   [[0 -1 -1 0] [-1 4 4 -1][-1 4 4 -1][0 -1 -1 0]]
   [[0 1 1 0][1 4 4 1][1 4 4 1][0 1 1 0]]
 ])

(defparameter 
 sparse-filters4x4
 [ [[0 -2 2 0] [0 -4 4 0] [0 -4 4 0] [0 -2 2 0]]
   [[0 0 0 0][-2 -4 -4 -2][2 4 4 2][0 0 0 0]]
   [[0 -1 -1 0] [-1 4 4 -1][-1 4 4 -1][0 -1 -1 0]]
   [[0 1 1 0][1 4 4 1][1 4 4 1][0 1 1 0]]
 ])

(de normalize-kernel (ker)
  (let ((s (* (idx-dim ker 1) (idx-dim ker 2)))
	(rk (idx-copy ker)))
    (idx-bloop ((k rk))
      (let* ((av (/ ((idx-sum k)) s))
	     (sdev (- (/ ((idx-sumsqr k)) s) (* av av))))
	(idx-d2addc k (- av) k)
	(idx-d2dotc k (/ 1 sdev) k)))
    rk))

(de random-filters (nk ki kj)
  (let ((k (matrix nk ki kj)))
    (idx-bloop ((k k)) (idx-bloop ((k k)) (idx-bloop ((k k)) (k (rand -1 1)))))
    (normalize-kernel k)))

(de normalize-kernel-f (ker)
  (let ((s (* (idx-dim ker 1) (idx-dim ker 2)))
	(rk (idx-copy ker)))
    (idx-bloop ((k rk))
      (let* ((av (/ ((idx-sum k)) s))
	     (sdev (- (/ ((idx-sumsqr k)) s) (* av av))))
	(idx-f2addc k (- av) k)
	(idx-f2dotc k (/ 1 sdev) k)))
    rk))

(de random-filters-f (nk ki kj)
  (let ((k (float-matrix nk ki kj)))
    (idx-bloop ((k k)) (idx-bloop ((k k)) (idx-bloop ((k k)) (k (rand -1 1)))))
    (normalize-kernel-f k)))

(de test-image (n &optional kernel (image-file "jabba-640x480.jpg") )
  (libload "libimage/image-io")
  (when (not window) (new-window 0 0 1280 480 "convolution"))
  (let* ((mu (image-read-ubim image-file))
	 (m (double-matrix 1 (idx-dim mu 0) (idx-dim mu 1)))
	 (k (or kernel filters4x4))
	 (kd0 (idx-dim k 0))
	 (kd1 (idx-dim k 1))
	 (kd2 (idx-dim k 2))
	 (md0 (idx-dim m 0))
	 (md1 (idx-dim m 1))
	 (md2 (idx-dim m 2))
	 (out (double-matrix kd0 (1+ (- md1 kd1)) (1+ (- md2 kd2))))
	 (nops (* n (idx-dim out 1) (idx-dim out 2) kd0 kd1 kd2))
	 (i 0)
	 (tt 0))
    (setq k (normalize-kernel k))
    (idx-copy mu (select m 0 0))
    (while t
      (setq tt (realtime (repeat n (idx-clear out) (convolve2dm-acc m 0 k out))))
      (graphics-batch
       (rgb-draw-matrix 0 0 mu 1 1)
       (let* ((o (select out 0 i))
	      (vmax ((idx-sup o)))
	      (vmin ((idx-inf o)))
	      (vs (max (abs vmax) (abs vmin))))
	 (gray-draw-matrix 640 0 o (- vs) vs 1 1)))
      (printf "%g (%g mflops)\n" tt (/ nops (* tt 1e6)))
      (incr i) (when (= i kd0) (setq i 0)))
    ()))

(de test-image-f (n &optional kernel (image-file "jabba-640x480.jpg") )
  (libload "libimage/image-io")
  (when (not window) (new-window 0 0 1280 480 "convolution"))
  (let* ((mu (image-read-ubim image-file))
	 (m (float-matrix 1 (idx-dim mu 0) (idx-dim mu 1)))
	 (k (or kernel filters4x4))
	 (kd0 (idx-dim k 0))
	 (kd1 (idx-dim k 1))
	 (kd2 (idx-dim k 2))
	 (md0 (idx-dim m 0))
	 (md1 (idx-dim m 1))
	 (md2 (idx-dim m 2))
	 (out (float-matrix kd0 (1+ (- md1 kd1)) (1+ (- md2 kd2))))
	 (nops (* n (idx-dim out 1) (idx-dim out 2) kd0 kd1 kd2))
	 (i 0)
	 (tt 0))
    (setq k (normalize-kernel-f k))
    (idx-copy mu (select m 0 0))
    (while t
      (setq tt (realtime (repeat n (idx-clear out) (fconvolve2dm-acc m 0 k out))))
      (graphics-batch
       (rgb-draw-matrix 0 0 mu 1 1)
       (let* ((o (select out 0 i))
	      (vmax ((idx-sup o)))
	      (vmin ((idx-inf o)))
	      (vs (max (abs vmax) (abs vmin))))
	 (gray-draw-matrix 640 0 o (- vs) vs 1 1)))
      (printf "%g (%g mflops)\n" tt (/ nops (* tt 1e6)))
      (incr i) (when (= i kd0) (setq i 0)))
    ()))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(de test (n &optional (ki 9) (kj 9) (si 480) (sj 640))
  (let* ((tt 0)
	 (m (matrix si sj))
	 (out (matrix (1+ (- si ki)) (1+ (- sj kj))))
	 (k (matrix ki kj))
	 (k2 (matrix (* ki kj)))
	 (di (int-matrix (* ki kj)))
	 (dj (int-matrix (* ki kj)))
	 (nops (* n (idx-dim out 0) (idx-dim out 1) (idx-dim k2 0))))
    (for (i 0 (1- ki)) (for (j 0 (1- kj)) (let ((p (+ (* kj i) j))) (di p i) (dj p j))))
    (setq tt (realtime (repeat n (convolve2d-acc m k out))))
    (printf "convolve2d-acc   : %g (%g mflops)\n" tt (/ nops (* tt 1e6)))
    ()))

(de test3 (n &optional (nk 8) (ki 9) (kj 9) (si 480) (sj 640))
  (let* ((tt 0)
	 (ks (* ki kj))
	 (m (matrix 1 si sj))
	 (k (matrix nk ki kj))
	 (out (matrix nk (1+ (- si ki)) (1+ (- sj kj))))
	 (nops (* n (idx-dim out 1) (idx-dim out 2) (idx-dim k 0) (idx-dim k 1) (idx-dim k 2)))
	 )
    ;; (m () () () (range 0 (1- (* si sj))))
    (k () () () (range 0 (1- (* nk ki kj))))
    ;; (k 0 0 0 1)
    ;; (k 1 2 2 1)
    (setq tt (realtime (repeat n (convolve2dm-acc m 0 k out))))
    ;; (pretty m)
    ;; (pretty out)
    (printf "convolve2dm-acc  : %g (%g mflops)\n" tt (/ nops (* tt 1e6)))
    ()))

(de test3f (n &optional (nk 8) (ki 9) (kj 9) (si 480) (sj 640))
  (let* ((tt 0)
	 (ks (* ki kj))
	 (m (float-matrix 1 si sj))
	 (k (float-matrix nk ki kj))
	 (out (float-matrix nk (1+ (- si ki)) (1+ (- sj kj))))
	 (nops (* n (idx-dim out 1) (idx-dim out 2) (idx-dim k 0) (idx-dim k 1) (idx-dim k 2)))
	 )
    (m () () () (range 0 (1- (* si sj))))
    ;; (k 0 2 2 1)
    ;; (k 1 2 2 1)
    (setq tt (realtime (repeat n (fconvolve2dm-acc m 0 k out))))
    ;; (pretty m)
    ;; (pretty out)
    (printf "fconvolve2dm-acc  : %g (%g mflops)\n" tt (/ nops (* tt 1e6)))
    ()))


(de test5 (n &optional (nk 8) (ki 9) (kj 9) (si 480) (sj 640))
  (let* ((tt 0)
	 (ks (* ki kj))
	 (m (matrix 1 si sj))
	 (out (matrix nk (1+ (- si ki)) (1+ (- sj kj))))
	 (k (matrix nk ks))
	 (d (int-matrix 3 ks))
	 (nops (* n (idx-dim out 0) (idx-dim out 1) (idx-dim k 0) (idx-dim k 1)))
	 )
    (idx-bloop ((m m)) (idx-bloop ((m m)) (idx-bloop ((m m)) (m (rand -1 1)))))
    (idx-bloop ((k k)) (idx-bloop ((k k)) (k (rand -1 1))))
    (for (i 0 (1- ki)) (for (j 0 (1- kj)) (let ((p (+ (* kj i) j))) (d 0 p 0) (d 1 p i) (d 2 p j))))
    (setq tt (cputime (repeat n (convolvem-acc-sp m k d out))))
    (printf "convolvem-acc-sp  : %g (%g mflops)\n" tt (/ nops (* tt 1e6)))
    ()))

(de test-convolvem-acc-sp (&optional (nk 2) (ki 3) (kj 3))
  (let* ((tt 0)
	 (ks (* ki kj))
	 (si 7) (sj 9)
	 (m (matrix 1 si sj))
	 (out (matrix nk (1+ (- si ki)) (1+ (- sj kj))))
	 (k (matrix nk ks))
	 (d (int-matrix 3 ks))
	 )
    (k 0 ()  '(0 0 0 0 1 0 0 0 0))
    (k 0 ()  '(1 0 0 0 0 0 0 0 0))
    (k 1 ()  '(0.111 0.111 0.111 0.111 0.111 0.111 0.111 0.111 0.111 ))
    (for (i 0 (1- ki)) (for (j 0 (1- kj)) (let ((p (+ (* kj i) j))) (d 0 p 0) (d 1 p i) (d 2 p j))))
    (for (i 0 (1- si)) (for (j 0 (1- sj)) (m 0 i j (+ (* 10 i) j))))
    (convolvem-acc-sp m k d out)
    (print (* (idx-dim out 1) (idx-dim out 2)))
    (pretty k)
    (pretty d)
    (print)
    (pretty m)
    (print)
    (pretty out)
    ()))


(printf "(test-image 1 (random-filters 8 9 9))\n")
(printf "(test-image-f 1 (random-filters-f 8 9 9))\n")
