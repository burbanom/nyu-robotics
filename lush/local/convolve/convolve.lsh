(libload "blas")
(libload "libidx/idx-double")
(libload "libidx/idx-float")

;; single convolution
(de convolve2d-acc (in ker out)
  ((-idx2- (-double-)) in)
  ((-idx2- (-double-)) ker)
  ((-idx2- (-double-)) out)
  (idx-d2resize out (1+ (- (idx-dim in 0) (idx-dim ker 0))) (1+ (- (idx-dim in 1) (idx-dim ker 1))))
  (let ((inm0 (idx-modulo in 0))
	(inm1 (idx-modulo in 1))
	(outd0 (idx-dim out 0))
	(outd1 (idx-dim out 1))
	(outm0 (idx-modulo out 0))
	(outm1 (idx-modulo out 1))
	(kerd0 (idx-dim ker 0))
	(kerd1 (idx-dim ker 1))
	(kerm0 (idx-modulo ker 0))
	(kerm1 (idx-modulo ker 1)))
    ((-int-) inm0 inm1)
    ((-int-) outd0 outd1 outm0 outm1)
    ((-int-) kerd0 kerd1 kerm0 kerm1)
    (when (or (<> 1 inm1) (<> 1 kerm1))
      (error "input, output or kernel has non-contiguous rows"))
    #{{double *inp = IDX_PTR($in,double);
       double *outp = IDX_PTR($out,double);
       double *kerp = IDX_PTR($ker,double);
       int i;
#pragma omp parallel for private(i)
       for (i=0; i<$outd0; i++) {
         int j;
         for (j=0; j<$kerd1; j++) {
         cblas_dgemv(CblasRowMajor,
                     CblasTrans, $outd0, $kerd0, 1.0,
                     inp+$inm0*i+j, $inm0,
                     kerp+j, $kerm0,
                     1.0,
                     outp+i*$outm0, 1); 
         }
       }
     }#}) ())

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; convolution with multiple kernels
;; <in> an idx3 of double
(de convolve2dm-acc (in inslice ker out)
  ((-idx3- (-double-)) in)
  ((-int-) inslice)
  ((-idx3- (-double-)) ker)
  ((-idx3- (-double-)) out)
  (idx-d3resize 
   out 
   (idx-dim ker 0) 
   (1+ (- (idx-dim in 1) (idx-dim ker 1)))
   (1+ (- (idx-dim in 2) (idx-dim ker 2))))
  #{{double *inp = IDX_PTR($in,double);
     double *kerp = IDX_PTR($ker,double);
     double *outp = IDX_PTR($out,double);
     double *buf;
     int ind[3], inm[3], outd[3], outm[3], kerd[3], kerm[3];
     int i,j,k;
     for (i=0; i<3; i++) {
       ind[i] = $in->dim[i]; 
       inm[i] = $in->mod[i];
       outd[i] = $out->dim[i];
       outm[i] = $out->mod[i];
       kerd[i] = $ker->dim[i];
       kerm[i] = $ker->mod[i];
     }
     if ( kerd[0] != outd[0] ) 
       run_time_error("number of kernels differs from number of output slices");
     // allocate buffer of unfolded inputs
     buf = (double*)malloc( kerd[0]*kerd[1]*kerd[2]*sizeof(double) ); 
     if ( buf == NULL ) { run_time_error("can't allocate kernel buffer"); }
     // fill up re-arranged kernel buffer
     int l=0;
     for (i=0; i<kerd[2]; i++) {
       for (j=0; j<kerd[0]; j++) {
         for (k=0; k<kerd[1]; k++) { 
           buf[l++] = kerp[i*kerm[2]+j*kerm[0]+k*kerm[1]];
         }
       }
     }
#pragma omp parallel for private(i)
     for (i=0; i<outd[1]; i++) {
       int j;
       for (j=0; j<kerd[2]; j++) {
         // printf("i=%d, j=%d\n",i,j);
         cblas_dgemm(CblasRowMajor,
                     CblasNoTrans, CblasNoTrans,
                     kerd[0], outd[2], kerd[1], 1.0,
                     buf+j*kerd[0]*kerd[1], kerd[1], 
                     inp+inm[1]*i+j, inm[1], 
                     1.0,
                     outp+outm[1]*i, outm[0]);
       }
     }
     // printf("done\n");
     free(buf);
     }#} ())

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; convolution with multiple kernels, single precision
(de fconvolve2dm-acc (in inslice ker out)
  ((-idx3- (-float-)) in)
  ((-int-) inslice)
  ((-idx3- (-float-)) ker)
  ((-idx3- (-float-)) out)
  (idx-f3resize 
   out 
   (idx-dim ker 0) 
   (1+ (- (idx-dim in 1) (idx-dim ker 1)))
   (1+ (- (idx-dim in 2) (idx-dim ker 2))))
  #{{float *inp = IDX_PTR($in,float);
     float *kerp = IDX_PTR($ker,float);
     float *outp = IDX_PTR($out,float);
     float *buf;
     int ind[3], inm[3], outd[3], outm[3], kerd[3], kerm[3];
     int i,j,k;
     for (i=0; i<3; i++) {
       ind[i] = $in->dim[i]; 
       inm[i] = $in->mod[i];
       outd[i] = $out->dim[i];
       outm[i] = $out->mod[i];
       kerd[i] = $ker->dim[i];
       kerm[i] = $ker->mod[i];
     }
     if ( kerd[0] != outd[0] ) 
       run_time_error("number of kernels differs from number of output slices");
     // allocate buffer of unfolded inputs
     buf = (float*)malloc( kerd[0]*kerd[1]*kerd[2]*sizeof(float) ); 
     if ( buf == NULL ) { run_time_error("can't allocate kernel buffer"); }
     // fill up re-arranged kernel buffer
     int l=0;
     for (i=0; i<kerd[2]; i++) {
       for (j=0; j<kerd[0]; j++) {
         for (k=0; k<kerd[1]; k++) { 
           buf[l++] = kerp[i*kerm[2]+j*kerm[0]+k*kerm[1]];
         }
       }
     }
#pragma omp parallel for private(i)
     for (i=0; i<outd[1]; i++) {
       int j;
       for (j=0; j<kerd[2]; j++) {
         // printf("i=%d, j=%d\n",i,j);
         cblas_sgemm(CblasRowMajor,
                     CblasNoTrans, CblasNoTrans,
                     kerd[0], outd[2], kerd[1], 1.0,
                     buf+j*kerd[0]*kerd[1], kerd[1], 
                     inp+inm[1]*i+j, inm[1], 
                     1.0,
                     outp+outm[1]*i, outm[0]);
       }
     }
     // printf("done\n");
     free(buf);
     }#} ())


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; convolution with multiple kernels on a single feature 
;; map or multiple feature maps from a 3d idx.
;; <ker> is a 2d idx containing a bunch of kernels
;; <d> is a 2d idx of ints which contains ijk offsets
;; of each input in a neighborhood (common for all kernels).
;; <out> is a 3d idx where results are written.
(de convolvem-acc-sp (in ker d out)
  ((-idx3- (-double-)) in)
  ((-idx2- (-double-)) ker)
  ((-idx2- (-int-)) d)
  ((-idx3- (-double-)) out)
  #{{double *inp = IDX_PTR($in,double);
     double *kerp = IDX_PTR($ker,double);
     int *dp = IDX_PTR($d,int);
     double *outp = IDX_PTR($out,double);
     int *off;
     double *buf;
     int ind[3], inm[3], outd[3], outm[3];
     int kern = $ker->dim[0];
     int kerd = $ker->dim[1];
     int dm0 = $d->mod[0];
     int i,j,k;
     if ( kerd != $d->dim[1] ) run_time_error("kernel size differes from offset table size");
     for (i=0; i<3; i++) {
       ind[i] = $in->dim[i]; 
       inm[i] = $in->mod[i];
       outd[i] = $out->dim[i];
       outm[i] = $out->mod[i];
     }
     int outsize = outd[1]*outd[2];
     off = (int*)malloc( kerd * sizeof(int) );
     if ( off == NULL ) { run_time_error("can't allocate offset buffer"); }
     for (i=0; i<kerd; i++) { 
       if ( (1+dp[i]>ind[0]) || (outd[1]+dp[dm0+i]>ind[1]) || (outd[2]+dp[2*dm0+i]>ind[2]) ) {
         printf("i=%d, dm0=%d",i,dm0);
         printf("outd[0]=%d, dp[0,i]=%d, ind[0]=%d\n",outd[0],dp[i],ind[0]);
         printf("outd[1]=%d, dp[1,i]=%d, ind[1]=%d\n",outd[1],dp[dm0+i],ind[1]);
         printf("outd[2]=%d, dp[2,i]=%d, ind[2]=%d\n",outd[2],dp[2*dm0+i],ind[2]);
         run_time_error("output is too small for valid convolution"); 
       }
       off[i] = dp[i]*inm[0] + dp[dm0+i]*inm[1] + dp[2*dm0+i]*inm[2]; 
       // printf("off[%d]=%d\n",off[i],i);
     }
     if ( kern != outd[0] ) run_time_error("number of kernels differs from number of output slices");
     // allocate buffer of unfolded inputs
     buf = (double*)malloc( outsize*kerd*sizeof(double) ); 
     if ( buf == NULL ) { run_time_error("can't allocate unfolded input buffer"); }
     // fill up buffer of unfolded inputs
     for (i=0; i<outd[1]; i++) {
       for (j=0; j<outd[2]; j++) {
         int o = i*outd[2] + j;
         int ino = i*inm[1] + j*inm[2];
         // printf("i=%d, j=%d, ino=%d\n",i,j,ino);
         for (k=0; k<kerd; k++) { 
           buf[o*kerd+k] = inp[ino+off[k]]; 
           // printf("buf[%d] = %f (inp[%d])\n",o*kerd+k,inp[ino+off[k]],ino+off[k]);
         }
         // printf("\n");
       }
     }
     /*
     printf("done2\n");
     for (i=0; i<outsize; i++) {
       printf("i=%3d: ",i);
       for (j=0; j<kerd; j++) { printf("%4f,",buf[i*kerd+j]); }
       printf("\n");
     }
     */
     /*
     printf("cblas_dgemm(%d,%d,%d,\n",CblasRowMajor,CblasNoTrans,CblasTrans);
     printf("            %d, %d, %d, %f\n", kern, outsize, kerd, 1.0);
     printf("            %ul, %d, %ul, %d, %f\n",(long)kerp, kerd, (long)buf, outsize, 1.0);
     printf("            %ul, %d)\n", (long)outp, outsize);
     */
     cblas_dgemm(CblasRowMajor,
                 CblasNoTrans, CblasTrans,
                 kern, outsize, kerd, 1.0,
                 kerp, kerd, 
                 buf, kerd, 1.0,
                 outp, outsize);
     // printf("done3\n");
     free(buf);
     free(off);
     }#} ())

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(de idx-d3shrink (in out)
  ((-idx3- (-double-)) in out)
  (cidx-bloop ("i" "j" "k" ("pin" in) ("pout" out))
    #{ *pout = *pin - tanh(*pin); #} ) ())

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(de pool-l2 (in si sj vi vj out)
  ((-idx3- (-double-)) in out)
  ((-int-) si sj vi vj)
  (let* ((m1 (idx-modulo in 1))
	 (m2 (idx-modulo in 2))
	 (d1 (idx-dim in 1))
	 (d2 (idx-dim in 2))
	 (o1 (int (+ 1 (/ (- d1 vi) si))))
	 (o2 (int (+ 1 (/ (- d2 vj) sj)))))
    ((-int-) m1 m2 d1 d2 o1 o2)
    (idx-d3resize out (idx-dim in 0) o1 o2)
    (idx-bloop ((in in) (out out))
      #{ double *pin = IDX_PTR($in,double); #}
      (cidx-bloop ("i" "j" ("pout" out))
         #{ double o = 0;
            int qi;
            for (qi=0; qi<$vi; qi++) {
              int qj;
              for (qj=0; qj<$vj; qj++) {
                double v = pin[$m1*(qi+i*$si) + $m2*(qj+j*$sj)];
                o += v*v;
              }
            }
            *pout = sqrt(o);
          #} ()))) ())

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; high-pass filtering followed by global contrast norm
(de contrast-norm (in skernel out)
  ((-idx2- (-double-)) in out skernel)
  (idx-clear out)
  (pause "pause 1\n")
  (convolve2d-acc in skernel out)
  (printf "cn 2\n")
  (let ((r (/ 1 (max 0.1 (/ ((idx-sumsqr out)) (* (idx-dim out 0) (idx-dim out 1)))))))
    (idx-d2dotc out r out)) ())
  

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(de normalize-slices (in minr)
  ((-idx3- (-double-)) in)
  ((-double-) minr)
  (let ((r 0) (k 1)
	(s (* (idx-dim in 1) (idx-dim in 2))))
    (idx-bloop ((in in))
      (setq r 0)
      (idx-bloop ((in in))
       #{ $r += cblas_dnrm2($in->dim[0],IDX_PTR($in,double),$in->mod[0]); #} )
      (setq k (/ s (max r minr)))
      (idx-bloop ((in in))
	#{ cblas_dscal($in->dim[0],$k,IDX_PTR($in,double),$in->mod[0]); #} ))
    ()))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(de make-high-pass (h w)
  (let* ((r (double-matrix h w))
	 (si (/ 1 (/ h 3))) (sj (/ 1 (/ w 3)))
	 (ci (/ h 2)) (cj (/ w 2))
	 (var 0))
    (for (i 0.5 (- h 0.5))
	 (for (j 0.5 (- w 0.5))
	      (let ((di (- i ci)) (dj (- j cj)))
		(r (int i) (int j) (exp (+ (* si di di) (* sj dj dj)))))))
    (r (int si) (int sj) 0)
    (r (int si) (int sj) (- ((idx-sum r))))
    ;; normalize variance
    (idx-d2dotc r (/ 1 (sqrt ((idx-sumsqr r)))) r)
    r))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; compilation

(eval `(de convolve-dummy () ,(list 'cpheader blas-includes) ()))


(let ((dhc-make-lushflags 
       (if no-openmp 
	   dhc-make-lushflags
	 (concat dhc-make-lushflags openmp-cflags))))
(dhc-make-with-libs
 ()
 blas-libs
 convolve-dummy

 convolve2d-acc
 convolve2dm-acc
 fconvolve2dm-acc
 convolvem-acc-sp
 idx-d3shrink
 pool-l2
 ;; contrast-norm
 normalize-slices
 ))
	  
