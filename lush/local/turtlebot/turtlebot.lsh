;; Welcome to the RosLush Turtlebot module.
;;
;; The module is organized as a set of subscribers and publishers related
;; to the Turtlebot.
;;
;; ADDING A SUBSCRIBER:
;;   1) Create your traits struct first. The subscriber traits have the
;;      following implicit interface:
;;
;;        struct SubscriberTraits
;;        {
;;          // ROS internal queue depth.
;;          enum { queue_size = SIZE, };
;;          // The ROS message type to receive.
;;          typedef MSG_TYPE msg_type;
;;          // Type passed from Lush. See CopyMsgData() below.
;;          typedef LUSH_CONVERT_TYPE lush_convert_type;
;;          // The ROS subscribe topic name.
;;          static const char* TopicStr();
;;          // Marshall data from ROS to Lush. Note the single parameter
;;          // of type lush_convert_type. To pass multiple pointers from
;;          // lush, define a helper structure.
;;          static void CopyMsgData(const msg_type::ConstPtr& msg,
;;                                  lush_convert_type* data);
;;        };
;;
;;      For convenience, typedef your subscriber traits as in
;;        typedef RosSubscriber<SubscriberTraits> XXXSubscriber;
;;      Note that the established convention is to use the ROS topic name as
;;      the prefix for the subscriber type.
;;
;;   2) Add the subscriber to the RosStreams by inheriting from it as in
;;        class RosStreams : public XXXSubscriber {};
;;   
;;   3) Create the ROS wrapper methods to start and receive from the subscriber.
;;        #? (==> <turtlebot> start-sub-XXX)
;;        ;; Start the XXX subscriber.
;;        (defmethod turtlebot start-sub-XXX ()
;;          (to-int #{ $client->StartSubscriber<XXXSubscriber>() #})
;;          )
;;        
;;        #? (==> <turtlebot> update-XXX)
;;        ;; Update the XXX subscriber.
;;        (defmethod turtlebot update-XXX ()
;;          (to-int #{
;;             $client->Update<XXXSubscriber>(IDX_PTR($XXX_LUSH, DATA_TYPE))
;;             #})
;;          )
;;   
;; ADDING A PUBLISHER:
;;   1) Create your traits struct first. The publisher traits have the
;;      following implicit interface:
;;
;;        struct PublisherTraits
;;        {
;;          // ROS internal queue depth.
;;          enum { queue_size = SIZE, };
;;          // The ROS message type to publish.
;;          typedef MSG_TYPE msg_type;
;;          // Type passed from Lush. See CopyMsgData() below.
;;          typedef LUSH_CONVERT_TYPE lush_convert_type;
;;          // The ROS publish topic name.
;;          static const char* TopicStr();
;;          // Marshall data from Lush to ROS. Note the single parameter
;;          // of type lush_convert_type. To pass multiple pointers from
;;          // lush, define a helper structure.
;;          static void CopyMsgData(const lush_convert_type& data,
;;                                  msg_type* msg);
;;        };
;;
;;      For convenience, typedef your publisher traits as in
;;        typedef RosPublisher<PublisherTraits> XXXPublisher;
;;      Note that the established convention is to use the ROS topic name as
;;      the prefix for the publisher type.
;;
;;   2) Add the publisher to the RosStreams by inheriting from it as in
;;        class RosStreams : public XXXPublisher {};
;;   
;;   3) Create the ROS wrapper methods to start and publish to the publisher.
;;        #? (==> <turtlebot> start-pub-XXX)
;;        ;; Start the XXX publisher.
;;        (defmethod turtlebot start-pub-XXX ()
;;          (to-int #{ $client->StartPublisher<XXXPublisher>() #})
;;          )
;;        
;;        #? (==> <turtlebot> publish-XXX <linear> <angular>)
;;        ;; Publish the XXX message.
;;        (defmethod turtlebot publish-XXX (DATA_0 DATA_1)
;;          ((-idx1- (-double-)) linear)
;;          ((-idx1- (-double-)) angular)
;;          #{
;;            $client->Publish<XXXPublisher>(
;;              XXXPublisher::lush_convert_type(IDX_PTR($DATA_0, DATA_0_TYPE),
;;                                              IDX_PTR($DATA_1, DATA_1_TYPE)));
;;          #}
;;          ()
;;          )
;;
;;      In the previous example, we create a temporary instance of
;;      the lush_convert_type to pass data from Lush to ROS. This is the
;;      established pattern when dealing with multiple parameters within the
;;      wrapper interfaces.
;;        
;;   

(libload "ros/ros")

;; Set include roslush path.
(let* ((dir (dirname file-being-loaded)))
  (setq c-include-path (cons (concat dir
                             "/../ros") c-include-path))
  )

;; Add include paths for roscpp.
(setq c-include-path (cons (concat (rospath "roscpp")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "rostime")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "rosconsole")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "std_msgs")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "cpp_common")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "roscpp_serialization")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "roscpp_traits")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "xmlrpcpp")
                           "/src") c-include-path))
;; Include paths for messages.
(setq c-include-path (cons (concat (rospath "std_msgs")
                           "/msg_gen/cpp/include") c-include-path))
(setq c-include-path (cons (concat (rospath "sensor_msgs")
                           "/msg_gen/cpp/include") c-include-path))
(setq c-include-path (cons (concat (rospath "geometry_msgs")
                           "/msg_gen/cpp/include") c-include-path))
(setq c-include-path (cons (concat (rospath "nav_msgs")
                           "/msg_gen/cpp/include") c-include-path))

#? turtlebot
;; Control interface for the ROS turtlebot.
(defclass turtlebot object
  ((-gptr- "RosClient*") client)
  ;; Depth image.
  ((-idx2- (-short-)) camera-depth-image-raw)
  ;; Odometry.
  ((-idx1- (-double-)) odom-pose-position)
  ((-idx1- (-double-)) odom-pose-orientation)
  ((-idx1- (-double-)) odom-pose-covariance)
  ((-idx1- (-double-)) odom-twist-linear)
  ((-idx1- (-double-)) odom-twist-angular)
  ((-idx1- (-double-)) odom-twist-covariance)
  ;; Depth points (XYZ).
  ((-idx2- (-float-)) camera-depth-points)
  )

#? (new turtlebot)
(defmethod turtlebot turtlebot ()
  (setq client (to-gptr #{ new RosClient() #}))
  ;; Depth image.
  (setq camera-depth-image-raw (short-matrix 480 640))
  ;; Odometry.
  (setq odom-pose-position (double-matrix 3))
  (setq odom-pose-orientation (double-matrix 4))
  (setq odom-pose-covariance (double-matrix 36))
  (setq odom-twist-linear (double-matrix 3))
  (setq odom-twist-angular (double-matrix 3))
  (setq odom-twist-covariance (double-matrix 36))
  ;; Depth points (XYZ).
  (setq camera-depth-points (float-matrix (* 480 640) 3))
  ()
  )

#? (delete <turtlebot>)
(defmethod turtlebot -destructor ()
  #{ delete $client; #}
  ()
  )

#? (==> <turtlebot> start-sub-camera-depth-image-raw)
;; Start the camera depth image_raw subscriber.
(defmethod turtlebot start-sub-camera-depth-image-raw ()
  (to-int #{ $client->StartSubscriber<CameraDepthImageRawSubscriber>() #})
  )

#? (==> <turtlebot> update-camera-depth-image-raw)
;; Update the camera depth image_raw subscriber.
(defmethod turtlebot update-camera-depth-image-raw ()
  (to-int #{
     $client->Update<CameraDepthImageRawSubscriber>(IDX_PTR($camera_depth_image_raw,
                                                            int_least16_t))
     #})
  )

#? (==> <turtlebot> start-sub-odom)
;; Start the odometry subscriber.
(defmethod turtlebot start-sub-odom ()
  (to-int #{ $client->StartSubscriber<OdomSubscriber>() #})
  )

#? (==> <turtlebot> update-odom)
;; Update the odometry subscriber.
(defmethod turtlebot update-odom ()
  (to-int #{
     $client->Update<OdomSubscriber>(
       &OdomSubscriber::lush_convert_type(IDX_PTR($odom_pose_position, double),
                                          IDX_PTR($odom_pose_orientation, double),
                                          IDX_PTR($odom_pose_covariance, double),
                                          IDX_PTR($odom_twist_linear, double),
                                          IDX_PTR($odom_twist_angular, double),
                                          IDX_PTR($odom_twist_covariance, double)))
     #})
  )

#? (==> <turtlebot> start-sub-camera-depth-points)
;; Start the camera depth points subscriber.
(defmethod turtlebot start-sub-camera-depth-points ()
  (to-int #{ $client->StartSubscriber<CameraDepthPointsSubscriber>() #})
  )

#? (==> <turtlebot> update-camera-depth-points)
;; Update the camera depth points subscriber.
(defmethod turtlebot update-camera-depth-points ()
  (let ((num-points [i 0]) (res 0))
    ;; Fetch point data then resize the structure for this frame.
    (setq res
       (to-int #{
         $client->Update<CameraDepthPointsSubscriber>(
           &CameraDepthPointsSubscriber::lush_convert_type(IDX_PTR($camera_depth_points, float),
                                                           IDX_PTR($num_points, int)))
         #})
     )
    (idx-changedim camera-depth-points 0 (num-points 0))
    res
    )
  )

#? (==> <turtlebot> start-pub-cmd-vel)
;; Start the cmd_vel publisher.
(defmethod turtlebot start-pub-cmd-vel ()
  (to-int #{ $client->StartPublisher<CmdVelPublisher>() #})
  )

#? (==> <turtlebot> publish-cmd-vel <linear> <angular>)
;; Publish the cmd_vel Twist message. Uses linear and angular velocities.
(defmethod turtlebot publish-cmd-vel (linear angular)
  ((-idx1- (-double-)) linear)
  ((-idx1- (-double-)) angular)
  #{
    $client->Publish<CmdVelPublisher>(
      CmdVelPublisher::lush_convert_type(IDX_PTR($linear, double),
                                         IDX_PTR($angular, double)));
  #}
  ()
  )

(dhc-make-with-c++
  ()
  `(,(concat (rospath "roscpp") "/lib/libros.so"))
  #{
    #include "roslush.h"
    #include "sensor_msgs/Image.h"
    #include "geometry_msgs/Twist.h"
    #include "nav_msgs/Odometry.h"
    #include "sensor_msgs/PointCloud2.h"
    #include "sensor_msgs/Imu.h"
    #include <cstring>
   
    /// <summary> OpenNI camera depth raw subscriber. </summary>
    struct RosLushCameraDepthImageRaw
    {
      enum { queue_size = 1, };
      typedef sensor_msgs::Image msg_type;
      typedef int_least16_t lush_convert_type;
      inline static const char* TopicStr()
      {
        return "camera/depth/image_raw";
      }
      inline static void CopyMsgData(const msg_type::ConstPtr& msg,
                                     lush_convert_type* data)
      {
        const int32_t dataSize = static_cast<int32_t>(msg->data.size());
        memcpy(data, &msg->data[0], dataSize);
      }
    };
    typedef RosSubscriber<RosLushCameraDepthImageRaw> CameraDepthImageRawSubscriber;

    template <typename Vector3>
    inline void CopyVector3(const Vector3& src, double* dst)
    {
      dst[0] = src.x; dst[1] = src.y; dst[2] = src.z;
    }

    template <typename Vector4>
    inline void CopyVector4(const Vector4& src, double* dst)
    {
      dst[0] = src.x; dst[1] = src.y; dst[2] = src.z; dst[3] = src.w;
    }

    /// <summary> Turtlebot odometry subscriber. </summary>
    struct RosLushOdom
    {
      struct OdomData
      {
        OdomData(double* p_pos, double* p_orien, double* p_cov,
                 double* t_lin, double* t_ang, double* t_cov)
          : pose_position(p_pos), pose_orientation(p_orien), pose_covariance(p_cov),
            twist_linear(t_lin), twist_angular(t_ang), twist_covariance(t_cov)
        {}
        double *pose_position, *pose_orientation, *pose_covariance;
        double *twist_linear, *twist_angular, *twist_covariance;
      };
      enum { queue_size = 5, };
      typedef nav_msgs::Odometry msg_type;
      typedef OdomData lush_convert_type;
      inline static const char* TopicStr()
      {
        return "odom";
      }
      inline static void CopyMsgData(const msg_type::ConstPtr& msg,
                                     lush_convert_type* data)
      {
        CopyVector3(msg->twist.twist.linear, data->twist_linear);
        CopyVector3(msg->twist.twist.angular, data->twist_angular);
        memcpy(data->twist_covariance, &msg->twist.covariance[0],
               msg->twist.covariance.size() * sizeof(msg->twist.covariance[0]));
        CopyVector3(msg->pose.pose.position, data->pose_position);
        CopyVector4(msg->pose.pose.orientation, data->pose_orientation);
        memcpy(data->pose_covariance, &msg->pose.covariance[0],
               msg->pose.covariance.size() * sizeof(msg->pose.covariance[0]));
      }
    };
    typedef RosSubscriber<RosLushOdom> OdomSubscriber;

    /// <summary> Point cloud subscriber. </summary>
    struct RosLushCameraDepthPoints
    {
      struct CloudData
      {
        CloudData(float* data_, int* numPoints_)
          : data(data_),
            numPoints(numPoints_)
        {}
        float* data;
        int* numPoints;
      };
      enum { queue_size = 1, };
      typedef sensor_msgs::PointCloud2 msg_type;
      typedef CloudData lush_convert_type;
      inline static const char* TopicStr()
      {
        return "camera/depth/points";
      }
      inline static void CopyMsgData(const msg_type::ConstPtr& msg,
                                     lush_convert_type* data)
      {
        enum { Float32XYZPointSize = sizeof(float) * 3, };
        // Collect parameters.
        uint8_t* dataDst = reinterpret_cast<uint8_t*>(data->data);
        int& numPoints = *data->numPoints;
        numPoints = 0;
        // Copy all of the points (XYZ) to the data array.
        const int pointStep = msg->point_step;
        const int dataLength = msg->height * msg->row_step;
        const uint8_t* dataSrc = &msg->data[0];
        const uint8_t* const dataSrcEnd = dataSrc + dataLength;
        for (; dataSrc < dataSrcEnd; dataSrc += pointStep)
        {
          // Ignore bad points.
          if (!std::isnan(*reinterpret_cast<const float*>(dataSrc)))
          {
            memcpy(dataDst, dataSrc, Float32XYZPointSize);
            dataDst += Float32XYZPointSize;
            ++numPoints;
          }
        }
      }
    };
    typedef RosSubscriber<RosLushCameraDepthPoints> CameraDepthPointsSubscriber;

    /// <summary> Twist cmd_vel message publisher. </summary>
    struct RosLushCmdVel
    {
      struct TwistData
      {
        TwistData(double* linear_, double* angular_)
         : linear(linear_),
           angular(angular_)
        {}
        double* linear;
        double* angular;
      };
      enum { queue_size = 5, };
      typedef geometry_msgs::Twist msg_type;
      typedef TwistData lush_convert_type;
      inline static const char* TopicStr()
      {
        return "/cmd_vel";
      }
      inline static void CopyMsgData(const lush_convert_type& data,
                                     msg_type* msg)
      {
        msg->linear.x = data.linear[0];
        msg->linear.y = data.linear[1];
        msg->linear.z = data.linear[2];
        msg->angular.x = data.angular[0];
        msg->angular.y = data.angular[1];
        msg->angular.z = data.angular[2];
      }
    };
    typedef RosPublisher<RosLushCmdVel> CmdVelPublisher;

    /// <summary> ROS streams for turtlebot. </summary>
    class RosStreams
      : // Subscribers.
        public CameraDepthImageRawSubscriber,
        public OdomSubscriber,
        public CameraDepthPointsSubscriber,
        // Publishers
        public CmdVelPublisher
    {};
    /// <summary> The ROS client for turtlebot. </summary>
   typedef RosClientBase<RosStreams> RosClient;
  #}
  (turtlebot
    turtlebot
    -destructor
    ;; Depth image raw.
    start-sub-camera-depth-image-raw
    update-camera-depth-image-raw
    ;; Odom.
    start-sub-odom
    update-odom
    ;; Depth points (XYZ).
    start-sub-camera-depth-points
    update-camera-depth-points
    ;; Publish cmd_vel.
    start-pub-cmd-vel
    publish_cmd_vel
    )
  )

#? turtlebot-test
;; Create a graphics window and show the raw depth data.
(de turtlebot-test ()
  (let* ((tb (new turtlebot)))
    (==> tb start-sub-camera-depth-image-raw)
    (new-window)
    (for (i 0 100)
      (==> tb update-camera-depth-image-raw)
      (gray-draw-matrix 0 0 :tb:camera-depth-image-raw 0 1023 1 1)
      )
    )
  )

