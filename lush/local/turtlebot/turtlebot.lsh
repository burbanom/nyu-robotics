(libload "ros/ros")

;; Add include paths for roscpp.
(setq c-include-path (cons (concat (rospath "roscpp")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "rostime")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "rosconsole")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "std_msgs")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "cpp_common")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "roscpp_serialization")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "roscpp_traits")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "xmlrpcpp")
                           "/src") c-include-path))
;; Include paths for messages.
(setq c-include-path (cons (concat (rospath "std_msgs")
                           "/msg_gen/cpp/include") c-include-path))
(setq c-include-path (cons (concat (rospath "sensor_msgs")
                           "/msg_gen/cpp/include") c-include-path))
(setq c-include-path (cons (concat (rospath "geometry_msgs")
                           "/msg_gen/cpp/include") c-include-path))
(setq c-include-path (cons (concat (rospath "nav_msgs")
                           "/msg_gen/cpp/include") c-include-path))

#? turtlebot
;; Control interface for the ROS turtlebot.
(defclass turtlebot object
  ((-gptr- "RosClient*") client)
  ;; Depth image.
  ((-idx2- (-short-)) camera-depth-image-raw)
  ;; Odometry.
  ((-idx1- (-double-)) odom-pose-position)
  ((-idx1- (-double-)) odom-pose-orientation)
  ((-idx1- (-double-)) odom-pose-covariance)
  ((-idx1- (-double-)) odom-twist-linear)
  ((-idx1- (-double-)) odom-twist-angular)
  ((-idx1- (-double-)) odom-twist-covariance)
  ;; Depth points (XYZ).
  ((-idx2- (-float-)) camera-depth-points)
  )

#? (new turtlebot)
(defmethod turtlebot turtlebot ()
  (setq client (to-gptr #{ new RosClient() #}))
  ;; Depth image.
  (setq camera-depth-image-raw (short-matrix 480 640))
  ;; Odometry.
  (setq odom-pose-position (double-matrix 3))
  (setq odom-pose-orientation (double-matrix 4))
  (setq odom-pose-covariance (double-matrix 36))
  (setq odom-twist-linear (double-matrix 3))
  (setq odom-twist-angular (double-matrix 3))
  (setq odom-twist-covariance (double-matrix 36))
  ;; Depth points (XYZ).
  (setq camera-depth-points (float-matrix (* 480 640) 3))
  ()
  )

#? (delete <turtlebot>)
(defmethod turtlebot -destructor ()
  #{ delete $client; #}
  ()
  )

#? (==> <turtlebot> start-stream-camera-depth-image-raw)
;; Start the camera depth image_raw stream.
(defmethod turtlebot start-stream-camera-depth-image-raw ()
  (to-int #{ $client->StartStream<CameraDepthImageRawStream>() #})
  )

#? (==> <turtlebot> update-stream-camera-depth-image-raw)
;; Update the camera depth image_raw stream.
(defmethod turtlebot update-stream-camera-depth-image-raw ()
  (to-int #{
     $client->UpdateStream<CameraDepthImageRawStream>(IDX_PTR($camera_depth_image_raw,
                                                              int_least16_t))
     #})
  )

#? (==> <turtlebot> start-stream-odom)
;; Start the odometry stream.
(defmethod turtlebot start-stream-odom ()
  (to-int #{ $client->StartStream<OdomStream>() #})
  )

#? (==> <turtlebot> update-stream-odom)
;; Update the odometry stream.
(defmethod turtlebot update-stream-odom ()
  (to-int #{
     $client->UpdateStream<OdomStream>(
       &OdomStream::lush_convert_type(IDX_PTR($odom_pose_position, double),
                                      IDX_PTR($odom_pose_orientation, double),
                                      IDX_PTR($odom_pose_covariance, double),
                                      IDX_PTR($odom_twist_linear, double),
                                      IDX_PTR($odom_twist_angular, double),
                                      IDX_PTR($odom_twist_covariance, double)))
     #})
  )

#? (==> <turtlebot> start-stream-camera-depth-points)
;; Start the camera depth points stream.
(defmethod turtlebot start-stream-camera-depth-points ()
  (to-int #{ $client->StartStream<CameraDepthPointsStream>() #})
  )

#? (==> <turtlebot> update-stream-camera-depth-points)
;; Update the camera depth points stream.
(defmethod turtlebot update-stream-camera-depth-points ()
  (let ((num-points [i 0]) (res 0))
    ;; Fetch point data then resize the structure for this frame.
    (setq res
       (to-int #{
         $client->UpdateStream<CameraDepthPointsStream>(
           &CameraDepthPointsStream::lush_convert_type(IDX_PTR($camera_depth_points, float),
                                                       IDX_PTR($num_points, int)))
         #})
     )
    (idx-changedim camera-depth-points 0 (num-points 0))
    res
    )
  )

(dhc-make-with-c++
  ()
  `(,(concat (rospath "roscpp") "/lib/libros.so"))
  #{
    #include "ros/ros.h"
    #include "ros/exceptions.h"
    #include "sensor_msgs/Image.h"
    #include "geometry_msgs/Twist.h"
    #include "nav_msgs/Odometry.h"
    #include "sensor_msgs/PointCloud2.h"
    #include "sensor_msgs/Imu.h"
    #include "boost/scoped_ptr.hpp"
    #include <exception>
    #include <string>
    #include <iostream>
    #include <stdint.h>
    #include <cstring>
    #include <cmath>

    // Forward declaration.
    template <typename RosLushStreamTraits> class RosTopicSubscription;

    /// <summary> OpenNI camera depth raw stream. </summary>
    struct RosLushCameraDepthImageRaw
    {
      typedef sensor_msgs::Image msg_type;
      typedef int_least16_t lush_convert_type;
      inline static const char* TopicStr()
      {
        return "camera/depth/image_raw";
      }
      inline static void CopyMsgData(const msg_type::ConstPtr& msg,
                                     lush_convert_type* data)
      {
        const int32_t dataSize = static_cast<int32_t>(msg->data.size());
        memcpy(data, &msg->data[0], dataSize);
      }
    };
    typedef RosTopicSubscription<RosLushCameraDepthImageRaw> CameraDepthImageRawStream;

    template <typename Vector3>
    inline void CopyVector3(const Vector3& src, double* dst)
    {
      dst[0] = src.x; dst[1] = src.y; dst[2] = src.z;
    }

    template <typename Vector4>
    inline void CopyVector4(const Vector4& src, double* dst)
    {
      dst[0] = src.x; dst[1] = src.y; dst[2] = src.z; dst[3] = src.w;
    }

    /// <summary> Turtlebot odometry stream. </summary>
    struct RosLushOdom
    {
      struct OdomData
      {
        OdomData(double* p_pos, double* p_orien, double* p_cov,
                 double* t_lin, double* t_ang, double* t_cov)
          : pose_position(p_pos), pose_orientation(p_orien), pose_covariance(p_cov),
            twist_linear(t_lin), twist_angular(t_ang), twist_covariance(t_cov)
        {}
        double *pose_position, *pose_orientation, *pose_covariance;
        double *twist_linear, *twist_angular, *twist_covariance;
      };
      typedef nav_msgs::Odometry msg_type;
      typedef OdomData lush_convert_type;
      inline static const char* TopicStr()
      {
        return "odom";
      }
      inline static void CopyMsgData(const msg_type::ConstPtr& msg,
                                     lush_convert_type* data)
      {
        CopyVector3(msg->twist.twist.linear, data->twist_linear);
        CopyVector3(msg->twist.twist.angular, data->twist_angular);
        memcpy(data->twist_covariance, &msg->twist.covariance[0],
               msg->twist.covariance.size() * sizeof(msg->twist.covariance[0]));
        CopyVector3(msg->pose.pose.position, data->pose_position);
        CopyVector4(msg->pose.pose.orientation, data->pose_orientation);
        memcpy(data->pose_covariance, &msg->pose.covariance[0],
               msg->pose.covariance.size() * sizeof(msg->pose.covariance[0]));
      }
    };
    typedef RosTopicSubscription<RosLushOdom> OdomStream;

    /// <summary> Point cloud stream. </summary>
    struct RosLushCameraDepthPoints
    {
      struct CloudData
      {
        CloudData(float* data_, int* numPoints_)
          : data(data_),
            numPoints(numPoints_)
        {}
        float* data;
        int* numPoints;
      };
      typedef sensor_msgs::PointCloud2 msg_type;
      typedef CloudData lush_convert_type;
      inline static const char* TopicStr()
      {
        return "camera/depth/points";
      }
      inline static void CopyMsgData(const msg_type::ConstPtr& msg,
                                     lush_convert_type* data)
      {
        enum { Float32XYZPointSize = sizeof(float) * 3, };
        // Collect parameters.
        uint8_t* dataDst = reinterpret_cast<uint8_t*>(data->data);
        int& numPoints = *data->numPoints;
        numPoints = 0;
        // Copy all of the points (XYZ) to the data array.
        const int pointStep = msg->point_step;
        const int dataLength = msg->height * msg->row_step;
        const uint8_t* dataSrc = &msg->data[0];
        const uint8_t* const dataSrcEnd = dataSrc + dataLength;
        for (; dataSrc < dataSrcEnd; dataSrc += pointStep)
        {
          // Ignore bad points.
          if (!std::isnan(*reinterpret_cast<const float*>(dataSrc)))
          {
            memcpy(dataDst, dataSrc, Float32XYZPointSize);
            dataDst += Float32XYZPointSize;
            ++numPoints;
          }
        }
      }
    };
    typedef RosTopicSubscription<RosLushCameraDepthPoints> CameraDepthPointsStream;

    /// <summary> Generic ROS stream logic. </summary>
    template <typename RosLushStreamTraits>
    class RosTopicSubscription
    {
    public:
      typedef typename RosLushStreamTraits::msg_type msg_type;
      typedef typename RosLushStreamTraits::lush_convert_type lush_convert_type;

      RosTopicSubscription()
      : m_subscriber(),
        m_frId(-1),
        m_lastFrIdUpdated(-1),
        m_mostRecent()
      {}

      virtual ~RosTopicSubscription()
      {}

      /// <summary> Callback for subscription. </summary>
      void Callback(const typename msg_type::ConstPtr& msg)
      {
        m_mostRecent = msg;
        ++m_frId;
      }

      /// <summary> Start stream. </summary>
      /// <returns> Zero on success, otherwise failure.. </returns>
      int StartStream(ros::NodeHandle* nodeHandle)
      {
        assert(nodeHandle);
        try
        {
          m_subscriber = nodeHandle->subscribe(RosLushStreamTraits::TopicStr(), 1,
                                               &RosTopicSubscription::Callback,
                                               this);
          std::cout << "StartStream() : subscribed to "
                       "'" << RosLushStreamTraits::TopicStr() << "'"
                    << std::endl;
          return 0;
        }
        catch (std::exception& e)
        {
          std::cerr << "StartStream() : error subscribing to "
                       "'" << RosLushStreamTraits::TopicStr() << "'"
                    << std::endl;
          return 1;
        }
      }

      /// <summary> Update stream. </summary>
      /// <returns> Non-negative frame id on success. </returns>
      int Update(lush_convert_type* data)
      {
        ros::spinOnce();
        if (m_lastFrIdUpdated < m_frId)
        {
          // Copy data then release message.
          RosLushStreamTraits::CopyMsgData(m_mostRecent, data);
          m_mostRecent.reset();
          m_lastFrIdUpdated = m_frId;
          return m_lastFrIdUpdated;
        }
        else
        {
          return -1;
        }
      }

    private:
      ros::Subscriber m_subscriber;
      int32_t m_frId;
      int32_t m_lastFrIdUpdated;
      typename msg_type::ConstPtr m_mostRecent;
    };

    /// <summary> The ROS client for turtlebot. </summary>
    /// <remarks>
    ///   <para> Inherit from stream types to add stream services. </summary>
    /// </remarks>
    class RosClient
      : public CameraDepthImageRawStream,
        public OdomStream,
        public CameraDepthPointsStream
    {
    public:
      RosClient()
      : m_nodeHandle(NULL)
      {
        // Init ROS.
        {
          ros::VP_string remappings;
          ros::init(remappings, std::string("listener"),
                    ros::init_options::AnonymousName);
        }
        std::cout << "RosClient() : initialized ros" << std::endl;
        // Start the node.
        m_nodeHandle.reset(new ros::NodeHandle());
        std::cout << "RosClient() : started node " << m_nodeHandle
                  << std::endl;
      }

      /// <summary> Start one of the ROS streams. </summary>
      template <typename StreamType>
      inline int StartStream()
      {
        StreamType* stream = static_cast<StreamType*>(this);
        return stream->StartStream(m_nodeHandle.get());
      }

      /// <summary> Update one of the ROS streams. </summary>
      template <typename StreamType>
      inline int UpdateStream(typename StreamType::lush_convert_type* data)
      {
        StreamType* stream = static_cast<StreamType*>(this);
        return stream->Update(data);
      }

    private:
      // Disable copy and assign.
      RosClient(const RosClient&);
      RosClient& operator=(const RosClient&);

      /// <summary> The ROS node maintains the connections. </summary>
      boost::scoped_ptr<ros::NodeHandle> m_nodeHandle;
    };
  #}
  (turtlebot
    turtlebot
    -destructor
    ;; Depth image raw.
    start-stream-camera-depth-image-raw
    update-stream-camera-depth-image-raw
    ;; Odom.
    start-stream-odom
    update-stream-odom
    ;; Depth points (XYZ).
    start-stream-camera-depth-points
    update-stream-camera-depth-points
    )
  )

#? turtlebot-test
;; Create a graphics window and show the raw depth data.
(de turtlebot-test ()
  (let* ((tb (new turtlebot)))
    (==> tb start-stream-camera-depth-image-raw)
    (new-window)
    (for (i 0 100)
      (==> tb update-stream-camera-depth-image-raw)
      (gray-draw-matrix 0 0 :tb:camera-depth-image-raw 0 1023 1 1)
      )
    )
  )

