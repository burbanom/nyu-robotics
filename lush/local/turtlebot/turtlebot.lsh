(libload "ros/ros")

;; Add include paths for roscpp.
(setq c-include-path (cons (concat (rospath "roscpp")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "rostime")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "rosconsole")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "std_msgs")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "cpp_common")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "roscpp_serialization")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "roscpp_traits")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "xmlrpcpp")
                           "/src") c-include-path))

(setq c-include-path (cons (concat (rospath "std_msgs")
                           "/msg_gen/cpp/include") c-include-path))
(setq c-include-path (cons (concat (rospath "sensor_msgs")
                           "/msg_gen/cpp/include") c-include-path))
#? turtlebot
;; Control interface for the ROS turtlebot.
(defclass turtlebot object
  ((-gptr- "RosClient*") client)
  ((-idx2- (-short-)) depth_image_raw)
  )

(defmethod turtlebot turtlebot ()
  (setq client (to-gptr #{ new RosClient() #}))
  ;; Not initialized until we start stream.
  (setq depth_image_raw (short-matrix 480 640))
  ()
  )

(defmethod turtlebot -destructor ()
  #{ delete $client; #}
  ()
  )

#? (==> <turtlebot> start-stream-depth-image-raw)
;; Start the depth image stream.
(defmethod turtlebot start-stream-depth-image-raw ()
  (to-int #{ $client->StartStreamDepthImageRaw() #})
  )

#? (==> <turtlebot> update-depth-image-raw)
;; Update the depth image stream.
(defmethod turtlebot update-depth-image-raw ()
  (to-int #{ $client->UpdateDepthImageRaw(IDX_PTR($depth_image_raw, int_least16_t)) #})
  )

(dhc-make-with-c++
  ()
  `(,(concat (rospath "roscpp") "/lib/libros.so"))
  #{
    #include "ros/ros.h"
    #include "ros/exceptions.h"
    #include "sensor_msgs/Image.h"
    #include <exception>
    #include <string>
    #include <iostream>
    #include <stdint.h>
    #include <cstring>

    /// <summary> The ROS client for turtlebot. </summary>
    class RosClient
    {
    public:
      enum { DepthImageBpp = 2, };

      RosClient()
      : m_nodeHandle(NULL),
        m_depImgRaw(),
        m_depImgRawFrId(0),
        m_depImgRawMostRecent()
      {
        // Init ROS.
        {
          ros::VP_string remappings;
          ros::init(remappings, std::string("listener"),
                    ros::init_options::AnonymousName);
        }
        std::cout << "RosClient() : initialized ros" << std::endl;
        // Start the node.
        m_nodeHandle = new ros::NodeHandle();
        std::cout << "RosClient() : started node " << m_nodeHandle
                  << std::endl;
      }

      ~RosClient()
      {
        delete m_nodeHandle;
      }

      /// <summary> Callback for subscription to depth/image_raw. </summary>
      void DepthImageRawCallback(const sensor_msgs::Image::ConstPtr& msg)
      {
        m_depImgRawMostRecent = msg;
        ++m_depImgRawFrId;
      }

      int StartStreamDepthImageRaw()
      {
        try
        {
          std::cout << "StartStreamDepthImageRaw() : try to subscribe to "
                       "'camera/depth/image_raw'"
                    << std::endl;
          m_depImgRaw = m_nodeHandle->subscribe("camera/depth/image_raw", 1,
                                                 &RosClient::DepthImageRawCallback,
                                                 this);
          std::cout << "StartStreamDepthImageRaw() : subscribed to "
                       "'camera/depth/image_raw'"
                    << std::endl;
          return 0;
        }
        catch (std::exception& e)
        {
          std::cerr << "StartStreamDepthImageRaw() : error subscribing to "
                       "'camera/depth/image_raw'"
                    << std::endl;
          return 1;
        }
      }

      /// <summary> Update depth image raw stream message. </summary>
      /// <returns> Non-negative frame id on success </returns>
      int UpdateDepthImageRaw(int_least16_t* data)
      {
        const int32_t depImgRawFrId = m_depImgRawFrId;
        ros::spinOnce();
        if (depImgRawFrId < m_depImgRawFrId)
        {
          // Copy data then release image.
          //const int32_t dataSize = m_depImgRawMostRecent->width *
          //                         m_depImgRawMostRecent->height * DepthImageBpp;
          const int32_t dataSize = static_cast<int32_t>(m_depImgRawMostRecent->data.size());
          memcpy(data, &m_depImgRawMostRecent->data[0], dataSize);
          m_depImgRawMostRecent.reset();
          return m_depImgRawFrId;
        }
        else
        {
          return -1;
        }
      }

    private:
      ros::NodeHandle* m_nodeHandle;
      ros::Subscriber m_depImgRaw;

      int32_t m_depImgRawFrId;
      sensor_msgs::ImageConstPtr m_depImgRawMostRecent;
    };
  #}
  (turtlebot
     turtlebot
     start-stream-depth-image-raw
     update-depth-image-raw
     -destructor)
  )

#? turtlebot-test
;; Create a graphics window and show the raw depth data.
(de turtlebot-test ()
  (let* ((tb (new turtlebot)))
    (==> tb start-stream-depth-image-raw)
    (new-window)
    (while t
      (==> tb update-depth-image-raw)
      (gray-draw-matrix 10 10 :tb:depth_image_raw 0 2048 1 1)
      )
    )
  )

