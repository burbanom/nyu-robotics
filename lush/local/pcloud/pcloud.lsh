;; A Library to manipulate point clouds

(libload "libidx/idx-float")
(setq thisdir (dirname file-being-loaded))

#? turtlebot-c2v
;; kinect-to-vehicle transformation matrix for standard Turtlebot.
;; Element (0,3) is the negative distance (in meters) between the 
;; kinect sensor and the center of the robot along the forward axis.
;; element (2,3) is the negative height of the kinect sensor above the
;; ground.
(defparameter turtlebot-c2v [d [0 0 1 -0.5] [1 0 0 0] [0 1 0 -0.25]])

#? (pcloud-image-to-cloud <c2v> <image> <depth> <cutoff> <rgb> <rcd> <cxyz> <vxyz>)
;; make a point cloud out of an RGB and a depth image.
;; <image> is the RGB image from the sensor.
;; <depth> is the depth image.
;; <c2v> is the camera to vehicle transformation matrix (3x4 idx2 of double).
;; <cutoff> is the depth above which points are ignored.
;; The output is written in <rgb>, <rcd>, <cxyz>, <vxyz> which are
;; all Nx3 idx of floats, where N is the number of valid disparity pixels. 
;; RCD contains the row/column/depth values, cXYZ the camera-relative
;; XYZ values, and vXYZ the vehicle-relative XYZ values.
;; for each point in the point cloud.
;; the number of points in the cloud is returned.
;; CAUTION: the output idx are not narrowed to size <n>. This must be
;; done in the calling functions.
(de pcloud-image-to-cloud (transform image depth dcutoff rgb rcd cxyz vxyz)
  ((-idx2- (-double-)) transform)
  ((-idx3- (-ubyte-)) image)
  ((-idx2- (-short-)) depth)
  ((-double-) dcutoff)
  ((-idx2- (-float-)) rgb rcd cxyz vxyz)
  (let ((r (select image 2 0))
	(g (select image 2 1))
	(b (select image 2 2))
	(omod0 (idx-modulo rgb 0))
	(n (* (idx-dim depth 0) (idx-dim depth 1))))
    ((-int-) omod0 n)
    (idx-f2resize rgb n 3)
    (idx-f2resize rcd n 3)
    (idx-f2resize cxyz n 3)
    (idx-f2resize vxyz n 3)
    (setq n 0)
    #{{ float *rgb=IDX_PTR($rgb,float);
        float *rcd=IDX_PTR($rcd,float);
        float *cxyz=IDX_PTR($cxyz,float);
        float *vxyz=IDX_PTR($vxyz,float);
        float ftr[12], fd;
        double *tr  = IDX_PTR($transform,double);
        /* convert transform matrix to float */
        int k; for (k=0;k<12;k++) { ftr[k]=(float)(tr[k]); }
       #}
       (cidx-bloop ("i" "j" ("r" r) ("g" g) ("b" b) ("d" depth))
          #{  fd = *d;
              if ((fd <= $dcutoff)&&( fd > 0.0)) { 
                rgb[0] = (float)(*r); rgb[1] = (float)(*g); rgb[2] = (float)(*b);
  	        rcd[0] = i; rcd[1] = j; rcd[2] = *d;
                pcloud_rcd2xyz(i,j,fd,cxyz);
	        vxyz[0] = ftr[0]*cxyz[0] + ftr[1]*cxyz[1] + ftr[2]*cxyz[2] + ftr[3];
	        vxyz[1] = ftr[4]*cxyz[0] + ftr[5]*cxyz[1] + ftr[6]*cxyz[2] + ftr[7];
                vxyz[2] = ftr[8]*cxyz[0] + ftr[9]*cxyz[1] +ftr[10]*cxyz[2] + ftr[11];
                rgb += $omod0; rcd += $omod0; cxyz += $omod0; vxyz += $omod0; $n++;
              } 
          #})
       #{ } #}
       n)) 

#? (inverse-transform <transform> <inverse>)
;; compute the inverse of a 3x4 transformation matrix.
;; Write the result in the 3x4 matrix <inverse>.
;; This assumes that the <transform> is a rotation
;; and a translation (no scaling, skewing, or flipping).
(de pcloud-inverse-transform (transform inverse)
  ((-idx2- (-double-)) transform)
  ((-idx2- (-double-)) inverse)
  ;; inverse of rotation is transpose of rotation
  (let ((rot-inverse (narrow inverse 1 3 0)))
    (idx-copy (transpose (narrow transform 1 3 0)) rot-inverse)
    ;; inverse of translation is minus inverse-rotated translation
    (idx-minus (idx-m2dotm1 rot-inverse (select transform 1 3)) 
	       (select inverse 1 3))) ())
    

#? (pcloud-transform-point <pointin> <pointout> <transform>)
;; transform a 3D point through a 3x4 transformation
;; matrix in homogeneous coordinates.
(de pcloud-transform-point (pointin pointout transform)
  ((-idx1- (-float-)) pointin)
  ((-idx1- (-float-)) pointout)
  ((-idx2- (-double-)) transform)
  (when (or (<> 3 (idx-dim pointin 0))
	    (<> 3 (idx-dim pointout 0))
	    (<> 3 (idx-dim transform 0))
	    (<> 4 (idx-dim transform 1)))
    (error "illegal size for transform-point"))
  #{{ float *pin = IDX_PTR($pointin,float);
      float *pout= IDX_PTR($pointout,float);
      double *tr  = IDX_PTR($transform,double);
      pout[0] = (float)(tr[0]*pin[0] + tr[1]*pin[1] + tr[2]*pin[2] + tr[3]);
      pout[1] = (float)(tr[4]*pin[0] + tr[5]*pin[1] + tr[6]*pin[2] + tr[7]);
      pout[2] = (float)(tr[8]*pin[0] + tr[9]*pin[1] + tr[10]*pin[2] + tr[11]);
   }#} ())

#? (pcloud-transform-cloud <cloud> <transform>)
;; transform a 3D point through a 3x4 transformation
;; matrix in homogeneous coordinates. The transformation
;; is performed in-place
(de pcloud-transform-cloud (pcloud transform)
  ((-idx2- (-float-)) pcloud)
  ((-idx2- (-double-)) transform)
  (when (or (< (idx-dim pcloud 0) 3)
	    (<> 3 (idx-dim transform 0))
	    (<> 4 (idx-dim transform 1)))
    (error "illegal size for pcloud-transform-cloud"))
  #{{ double *tr  = IDX_PTR($transform,double);
   #}
   (cidx-bloop ("i" ("pin" pcloud))
   #{{
      double r0, r1, r2;
      r0 = tr[0]*pin[0] + tr[1]*pin[1] + tr[2]*pin[2] + tr[3];
      r1 = tr[4]*pin[0] + tr[5]*pin[1] + tr[6]*pin[2] + tr[7];
      r2 = tr[8]*pin[0] + tr[9]*pin[1] + tr[10]*pin[2] + tr[11];
      pin[0]=(float)(r0); pin[1]=(float)(r1); pin[2]=(float)(r2);
    }#})
   #{ } #}
   ())

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(dhc-make 
 ()
 #{ 
   double pcloud_depth2meters(int depth) {
     if (depth < 2047) {
       return (float)(1.0 / (double)((depth) * -0.0030711016 + 3.3309495161));
     }
     return 0.0f;
   }

   void pcloud_rcd2xyz(int y, int x, short d, float *pout) {
     double fx_d = 1.0 / 5.9421434211923247e+02;
     double fy_d = 1.0 / 5.9104053696870778e+02;
     double cx_d = 3.3930780975300314e+02;
     double cy_d = 2.4273913761751615e+02;

     double depth = pcloud_depth2meters(depth);
     pout[0] = (float)((x - cx_d) * depth * fx_d);
     pout[1] = (float)((y - cy_d) * depth * fy_d);
     pout[2] = (float)(depth);
   }
 #}
 pcloud-image-to-cloud
 pcloud-inverse-transform
 pcloud-transform-point
 pcloud-transform-cloud
 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(de pctest ()
  (libload (concat thisdir "/../freenect/freenect"))
  (when (not window) (new-window 0 0 1280 480 "asd"))
  (let* ((q (new freenect 0))
	 (d (float-matrix 480 640))
	 (rgb (float-matrix 307200 3))
	 (rcd (float-matrix 307200 3))
	 (cxyz (float-matrix 307200 3))
	 (vxyz (float-matrix 307200 3))
	 (cv 0) (cd 0))
    (==> q update)
    (setq cv :q:rgb-frames)
    (setq cd :q:depth-frames)
    (while t
      (==> q update)
      (let ((rawd (==> q get-depth))
	    (image (==> q get-rgb)))
	(rgb-draw-matrix 0 0 (==> q get-rgb))
	(pcloud-image-to-cloud 
	 turtlebot-c2v image rawd 10 rgb rcd cxyz vxyz)
	(process-depth rawd d)
	(rgb-draw-matrix 640 0 d)
	(setq cv :q:rgb-frames)
	(setq cd :q:depth-frames)))))

